{"version":3,"sources":["components/Viewport.js","components/Brush.js","components/ColorPalette.js","components/GUIController.js","modules/VoxelWorld.js","modules/Brush.js","modules/ColorPalette.js","modules/VoxelsEditor.js","components/VoxelManager.js","components/App.js","index.js"],"names":["Viewport","props","canvasRef","React","createRef","this","onCanvasCreation","className","ref","Component","Brush","handleBrushClick","e","name","setState","activeBrush","onBrushChange","state","Fragment","Menu","Item","active","onClick","ColorCell","color","id","isActive","getRGB255","r","g","b","onColorCellClick","style","backgroundColor","ColorPalette","handlePickerChange","rgb","onSelectedColorChange","selectedColorIndex","currentColor","onNewSelectedColor","onGetColorData","buttons","colors","forEach","index","push","disableAlpha","onChangeComplete","GUIController","updateMobileState","isMobile","window","innerWidth","handleAccordionIndicesChange","componentName","desktop","activeAccordionIndices","pos","indexOf","splice","createDesktopBrush","brushSettings","Segment","Group","inverted","Header","as","Icon","Content","Subheader","Accordion","fluid","exclusive","Title","includes","content","titleProps","vertical","createDesktopColorPalette","colorPalette","mobile","isColorModalOpen","addEventListener","removeEventListener","Sidebar","Pushable","border","borderRadius","direction","visible","width","Grid","Row","Column","height","overflowY","marginTop","padding","createDesktopViewport","innerHeight","Modal","open","onClose","onOpen","scrolling","Description","Actions","Button","primary","createMobileGUI","createDesktopGUI","VoxelWorld","options","cellSize","tileSize","tileTextureWidth","tileTextureHeight","material","cellSliceSize","cells","cellIdToMesh","neighborOffsets","x","y","z","voxelX","THREE","euclideanModulo","cellX","Math","floor","cellY","cellZ","cellId","computeCellId","cell","Uint8Array","v","addCell","getCellForVoxel","addCellForVoxel","voxelOffset","computeVoxelOffset","positions","normals","uvs","indices","startX","startY","startZ","voxelY","voxelZ","voxel","getVoxel","uvVoxel","faces","dir","corners","uvRow","ndx","length","uv","getColorAtIndex","start","end","dx","dy","dz","lenSq","len","sqrt","t","ix","iy","iz","stepX","stepY","stepZ","txDelta","abs","tyDelta","tzDelta","xDist","yDist","zDist","txMax","Infinity","tyMax","tzMax","steppedIndex","position","normal","scene","updatedCellIds","offset","ox","oy","oz","updateCellGeometry","mesh","geometry","generateGeometryDataForCell","setAttribute","Float32Array","setIndex","computeBoundingSphere","add","set","cellKeys","Object","keys","regex","cellKey","match","parseInt","brush","setCurrentBrush","brushName","brushOptions","currentBrush","remove","paint","initializeColorArray","selectedColor","Array","i","Color","randInt","min","max","random","VoxelEditor","render","renderRequested","undefined","resizeRendererToDisplaySize","renderer","camera","aspect","canvas","clientWidth","clientHeight","updateProjectionMatrix","controls","update","requestRenderIfNotRequested","requestAnimationFrame","recordStartPosition","event","mouse","clientX","clientY","moveX","moveY","recordMovement","placeVoxelIfNoMovement","placeVoxel","world","setColorAtIndex","updateWorldGeometry","setSelectedColor","createCamera","createOrbitControls","background","addLight","side","alphaTest","transparent","vertexColors","setVoxel","createFlatGround","preventDefault","passive","fov","near","far","OrbitControls","target","light","domElement","needResize","setSize","rect","getBoundingClientRect","left","top","getCanvasRelativePosition","setFromMatrixPosition","matrixWorld","unproject","intersection","intersectRay","voxelId","getSelectedColorIndex","map","updateVoxelGeometry","VoxelManager","createVoxelWorld","voxelEditor","current","getSelectedColor","getColorsArray","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd997cc1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Viewport.css\";\n\n/**\n * Handles the 3D viewport and surrounding GUI for the application.\n * @property {Ref} canvasRef - Reference to the canvas\n *\n * @extends React.Component\n */\nclass Viewport extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Reference to canvas element\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // Canvas is ready to be drawn on\n    this.props.onCanvasCreation(this.canvasRef);\n  }\n\n  render() {\n    return <canvas className=\"viewportCanvas\" ref={this.canvasRef} />;\n  }\n}\n\nexport default Viewport;\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\n/**\n * Allows user to switch between basic brush options such as add, remove, and paint.\n * @extends React.Component\n */\nclass Brush extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeBrush: \"add\",\n    };\n  }\n\n  componentDidMount() {\n    // Send the initial brush name to parent component\n    this.props.onBrushChange(this.state.activeBrush);\n  }\n\n  /**\n   * Handler for each brush option. Upon click, updates the currently\n   * selected brush.\n   * @param {Event} e - React's original SyntheticEvent\n   * @param {data} props - Prop data from the Menu.Item\n   */\n  handleBrushClick = (e, { name }) => {\n    // Update state with current brush.\n    this.setState({ activeBrush: name });\n\n    // Send active brush name to parent component\n    this.props.onBrushChange(name);\n  };\n\n  render() {\n    const { activeBrush } = this.state;\n\n    return (\n      <React.Fragment>\n        <Menu.Item\n          name=\"add\"\n          active={activeBrush === \"add\"}\n          onClick={this.handleBrushClick}\n        >\n          Add Voxel\n        </Menu.Item>\n        <Menu.Item\n          name=\"remove\"\n          active={activeBrush === \"remove\"}\n          onClick={this.handleBrushClick}\n        >\n          Remove Voxel\n        </Menu.Item>\n        <Menu.Item\n          name=\"paint\"\n          active={activeBrush === \"paint\"}\n          onClick={this.handleBrushClick}\n        >\n          Paint Voxel\n        </Menu.Item>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Brush;\n","import React from \"react\";\nimport \"./ColorPalette.css\";\nimport { ChromePicker } from \"react-color\";\n\n/**\n * Represents each individual color on the color palette.\n * @param {*} props\n * @returns {JSX}\n */\nconst ColorCell = (props) => {\n  const { color, id, isActive } = props;\n  const { r, g, b } = color.getRGB255();\n\n  return (\n    <div\n      onClick={() => {\n        props.onColorCellClick(id, { r, g, b });\n      }}\n      className={`color-cell ${isActive ? \"active\" : \"\"}`}\n      style={{\n        backgroundColor: `rgb(${r}, ${g}, ${b})`,\n      }}\n    ></div>\n  );\n};\n\n/**\n * Allows the user to select what colors they wish to paint with,\n * choose new colors to paint with, and select the color that they\n * are currently painting with.\n * @extends React.Component\n */\nclass ColorPalette extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Get data from parent component\n    const { currentColor, selectedColorIndex } = this.props.onGetColorData();\n\n    this.state = {\n      currentColor,\n      selectedColorIndex,\n    };\n  }\n\n  /**\n   * Handles color picker change.\n   * @param {*} rgb\n   */\n  handlePickerChange = ({ rgb }) => {\n    // Tell the parent that there was a change in color\n    this.props.onSelectedColorChange(this.state.selectedColorIndex, rgb);\n\n    this.setState({ currentColor: rgb });\n  };\n\n  /**\n   * Updates the currently selected color cell to the given id\n   * @param {number} id\n   * @param {string} color - Color of the cell\n   */\n  onColorCellClick = (id, color) => {\n    // Tell the parent that there is a new selected color/cell\n    this.props.onNewSelectedColor(id);\n\n    this.setState({ selectedColorIndex: id, currentColor: color });\n  };\n\n  render() {\n    // Create buttons for each color\n    let buttons = [];\n    const { colors } = this.props.onGetColorData();\n    colors.forEach((color, index) => {\n      buttons.push(\n        <ColorCell\n          key={index}\n          id={index}\n          onColorCellClick={this.onColorCellClick}\n          color={color}\n          isActive={index === this.state.selectedColorIndex}\n        />\n      );\n    });\n\n    return (\n      <div>\n        <div className=\"color-cell-container\">{buttons}</div>\n        <ChromePicker\n          color={this.state.currentColor}\n          disableAlpha={true}\n          onChangeComplete={this.handlePickerChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ColorPalette;\n","import React from \"react\";\nimport Viewport from \"./Viewport\";\nimport Brush from \"./Brush\";\nimport ColorPalette from \"./ColorPalette\";\nimport \"./GUIController.css\";\nimport {\n  Modal,\n  Button,\n  Grid,\n  Sidebar,\n  Segment,\n  Menu,\n  Accordion,\n  Header,\n  Icon,\n} from \"semantic-ui-react\";\n\n/**\n * Handles switching between both desktop and mobile versions of the\n * UI. Whenever one of its chidlren updates, it will pass that data\n * up to its parent component.\n * @extends React.Component\n */\nclass GUIController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMobile: false,\n      mobile: {\n        isColorModalOpen: false,\n      },\n      desktop: {\n        brushSettings: {\n          activeAccordionIndices: [0],\n        },\n        colorPalette: {\n          activeAccordionIndices: [0],\n        },\n      },\n    };\n  }\n\n  /**\n   * Handler for screen resize events that updates whether or not the application\n   * should currently be using the mobile or desktop GUI.\n   */\n  updateMobileState = () => {\n    // If width below 768, use mobile GUI\n    const isMobile = window.innerWidth < 768;\n    this.setState({ isMobile });\n  };\n\n  /**\n   * Toggles the accordion at the given index for the given state with a\n   * activeAccordionIndices property.\n   * @param {number} index - Index of accordion to toggle\n   * @param {string} componentName - The state.desktop property with a activeAccordionIndices property\n   */\n  handleAccordionIndicesChange = (index, componentName) => {\n    // Make a copy of the desktop state object\n    const desktop = { ...this.state.desktop };\n\n    // Get the active indices for that component\n    const { activeAccordionIndices } = desktop[componentName];\n\n    // Get the position of the accordion index\n    const pos = activeAccordionIndices.indexOf(index);\n\n    // Position was found, remove the index for the user is closing the accordion\n    if (pos !== -1) {\n      activeAccordionIndices.splice(pos, 1);\n    }\n    // Position not found, add the index\n    else {\n      activeAccordionIndices.push(index);\n    }\n\n    // Update the state of the active indices for the given component\n    this.setState({ desktop });\n  };\n\n  componentDidMount() {\n    // Perform initial check for mobile device\n    this.updateMobileState();\n    window.addEventListener(\"resize\", this.updateMobileState);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateMobileState);\n  }\n\n  /**\n   * Creates the JSX for the desktop version of the viewport.\n   * @returns {JSX}\n   */\n  createDesktopViewport() {\n    return (\n      <Sidebar.Pushable\n        as={Segment}\n        style={{ border: \"none\", borderRadius: \"0\" }}\n      >\n        <Sidebar as={Menu} inverted direction=\"top\" visible width=\"very thin\">\n          <Menu.Item as=\"a\">Button 1</Menu.Item>\n          <Menu.Item as=\"a\">Button 2</Menu.Item>\n        </Sidebar>\n        <Viewport onCanvasCreation={this.props.onCanvasCreation} />\n      </Sidebar.Pushable>\n    );\n  }\n\n  /**\n   * Creates the JSX for the desktop version of the brush.\n   * @returns {JSX}\n   */\n  createDesktopBrush = () => {\n    const { brushSettings } = this.state.desktop;\n\n    return (\n      <Segment.Group>\n        <Segment inverted>\n          <Header as=\"h4\" inverted>\n            <Icon name=\"paint brush\" />\n            <Header.Content>\n              Brush Settings\n              <Header.Subheader>Add, remove, or paint voxels</Header.Subheader>\n            </Header.Content>\n          </Header>\n\n          <Accordion inverted fluid exclusive={false}>\n            <Accordion.Title\n              active={brushSettings.activeAccordionIndices.includes(0)}\n              content=\"Brush Action\"\n              index={0}\n              onClick={(e, titleProps) => {\n                this.handleAccordionIndicesChange(\n                  titleProps.index,\n                  \"brushSettings\"\n                );\n              }}\n            />\n            <Accordion.Content\n              active={brushSettings.activeAccordionIndices.includes(0)}\n            >\n              <Menu inverted vertical fluid>\n                <Brush onBrushChange={this.props.onBrushChange} />\n              </Menu>\n            </Accordion.Content>\n          </Accordion>\n        </Segment>\n      </Segment.Group>\n    );\n  };\n\n  /**\n   * Creates the JSX for the desktop version of the color palette.\n   * @returns {JSX}\n   */\n  createDesktopColorPalette = () => {\n    const { colorPalette } = this.state.desktop;\n\n    return (\n      <Segment.Group>\n        <Segment inverted>\n          <Header as=\"h4\" inverted>\n            <Icon name=\"tint\" />\n            <Header.Content>\n              Color Palette\n              <Header.Subheader>Select a color to paint with</Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Accordion inverted fluid exclusive={false}>\n            <Accordion.Title\n              active={colorPalette.activeAccordionIndices.includes(0)}\n              content=\"Color Selection\"\n              index={0}\n              onClick={(e, titleProps) => {\n                this.handleAccordionIndicesChange(\n                  titleProps.index,\n                  \"colorPalette\"\n                );\n              }}\n            />\n            <Accordion.Content\n              active={colorPalette.activeAccordionIndices.includes(0)}\n            >\n              <ColorPalette\n                onGetColorData={this.props.onGetColorData}\n                onSelectedColorChange={this.props.onSelectedColorChange}\n                onNewSelectedColor={this.props.onNewSelectedColor}\n              />\n            </Accordion.Content>\n          </Accordion>\n        </Segment>\n      </Segment.Group>\n    );\n  };\n\n  /**\n   * Create the desktop version of the UI.\n   * @returns {JSX}\n   */\n  createDesktopGUI() {\n    return (\n      <Grid className={\"desktopGrid\"}>\n        <Grid.Row>\n          <Grid.Column\n            width={3}\n            style={{\n              height: \"100vh\",\n              overflowY: \"auto\",\n              marginTop: \"1em\",\n            }}\n          >\n            {this.createDesktopBrush()}\n            {this.createDesktopColorPalette()}\n          </Grid.Column>\n\n          <Grid.Column width={11} style={{ padding: \"0\" }}>\n            {this.createDesktopViewport()}\n          </Grid.Column>\n\n          <Grid.Column width={2}>\n            <h1>Right Panel</h1>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  /**\n   * Create the mobile version of the UI.\n   * @returns {JSX}\n   */\n  createMobileGUI() {\n    return (\n      <div style={{ height: window.innerHeight }}>\n        <Sidebar.Pushable\n          as={Segment}\n          style={{ border: \"none\", borderRadius: \"0\" }}\n        >\n          <Sidebar as={Menu} inverted direction=\"top\" visible width=\"very thin\">\n            <Menu.Item\n              as=\"a\"\n              onClick={() =>\n                this.setState({ mobile: { isColorModalOpen: true } })\n              }\n            >\n              Color Palette\n            </Menu.Item>\n            <Menu.Item as=\"a\">Edit</Menu.Item>\n            <Menu.Item as=\"a\">Camera</Menu.Item>\n            <Menu.Item as=\"a\">Project</Menu.Item>\n          </Sidebar>\n\n          {/* Color Selection Modal */}\n          <Modal\n            open={this.state.mobile.isColorModalOpen}\n            onClose={() =>\n              this.setState({ mobile: { isColorModalOpen: false } })\n            }\n            onOpen={() => this.setState({ mobile: { isColorModalOpen: true } })}\n          >\n            <Modal.Header>Color Palette</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <ColorPalette\n                  onGetColorData={this.props.onGetColorData}\n                  onSelectedColorChange={this.props.onSelectedColorChange}\n                  onNewSelectedColor={this.props.onNewSelectedColor}\n                />\n              </Modal.Description>\n            </Modal.Content>\n\n            <Modal.Actions>\n              <Button\n                onClick={() =>\n                  this.setState({ mobile: { isColorModalOpen: false } })\n                }\n                primary\n              >\n                Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n          <Sidebar as={Menu} inverted direction=\"bottom\" visible width=\"thin\">\n            <Brush onBrushChange={this.props.onBrushChange} />\n          </Sidebar>\n\n          <Viewport onCanvasCreation={this.props.onCanvasCreation} />\n        </Sidebar.Pushable>\n      </div>\n    );\n  }\n\n  render() {\n    return this.state.isMobile\n      ? this.createMobileGUI()\n      : this.createDesktopGUI();\n  }\n}\n\nexport default GUIController;\n","import * as THREE from \"three\";\n\n/**\n * Manages voxel data.\n * At the top level, a single VoxelWorld consists of cells. Each cell is a 'chunk' of the world\n * that consists of voxels (i.e. cubes). In order to optimize render times, we merge the geometry\n * of all the voxels within a single cell and make a single render call (as opposed to rendering\n * each individual voxel). In addition, a single cell is essentially a 3D grid that voxels are\n * placed in. Each cell has a length, width, and height dictated by the cellSize variable. This could\n * be set to anything but is perhaps best capped at 128 or 256 (256^3 is 16,777,216 voxels!).\n *\n * @property {number} cellSize      - The length, width, and height of a single cell (or chunk) within the world\n * @property {number} cellSliceSize - The area of a single slice of each cell (cellSize^2)\n * @property {Object} cell          - Object consisting of an array for each cell\n */\nclass VoxelWorld {\n  /**\n   * Creates a VoxelWorld object with the given options\n   * @param {Object} options - Options to spawn the world with\n   * @param {number} options.cellSize - The length, width, and height of each cell\n   * @param {number} options.tileSize - The size of each tile from a texture atlas\n   * @param {number} options.tileTextureWidth - The width of the texture atlas\n   * @param {number} options.tileTextureHeight - The height of the texture atlas\n   * @param {*} options.material - The material that the VoxelWorld should use for its meshes\n   * @param {ColorPalette} options.colorPalette- The current color palette that the world is using\n   */\n  constructor(options) {\n    this.cellSize = options.cellSize;\n    this.tileSize = options.tileSize;\n    this.tileTextureWidth = options.tileTextureWidth;\n    this.tileTextureHeight = options.tileTextureHeight;\n    this.material = options.material;\n    this.colorPalette = options.colorPalette;\n    this.cellSliceSize = this.cellSize * this.cellSize;\n    this.cells = options.cells;\n\n    // Used in the updateCellGeometry() function\n    // Tracks the meshes for each cell\n    this.cellIdToMesh = {};\n\n    // Used in updateVoxelGeometry() function\n    this.neighborOffsets = [\n      [0, 0, 0], // self\n      [-1, 0, 0], // left\n      [1, 0, 0], // right\n      [0, -1, 0], // down\n      [0, 1, 0], // up\n      [0, 0, -1], // back\n      [0, 0, 1], // front\n    ];\n  }\n\n  /**\n   * Returns the offset, or index, to the voxel within the cell array\n   * at the given x, y, and z coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {number} Index to the voxel within the cell array\n   */\n  computeVoxelOffset(x, y, z) {\n    const { cellSize, cellSliceSize } = this;\n\n    // Note, the \"| 0\" actually TRUNCATES the value! Not quite the same as flooring\n    // https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\n    // Also, euclideanModulo(n, m) is the equivalent of (( n % m ) + m ) % m\n    const voxelX = THREE.MathUtils.euclideanModulo(x, cellSize) | 0;\n    const voxelY = THREE.MathUtils.euclideanModulo(y, cellSize) | 0;\n    const voxelZ = THREE.MathUtils.euclideanModulo(z, cellSize) | 0;\n\n    // Return index voxel is located at\n    return voxelY * cellSliceSize + voxelZ * cellSize + voxelX;\n  }\n\n  /**\n   * Computes the id of the cell stored as a key in this.cells based\n   * on the given x, y, and z coordinates of a voxel.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {string} The id of the cell in the form of \"(x,y,z)\"\n   */\n  computeCellId(x, y, z) {\n    const { cellSize } = this;\n    const cellX = Math.floor(x / cellSize);\n    const cellY = Math.floor(y / cellSize);\n    const cellZ = Math.floor(z / cellSize);\n    return `${cellX},${cellY},${cellZ}`;\n  }\n\n  /**\n   * Adds a new cell for a voxel at the given x, y, and z coordinates if a\n   * cell doesn't already exist to accomodate it.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {Uint8Array} Array of voxels for the cell\n   */\n  addCellForVoxel(x, y, z) {\n    // Get the id of the cell corresponding to the x, y, and z coordinate\n    const cellId = this.computeCellId(x, y, z);\n\n    // Get the array of voxels associated with the cellId\n    let cell = this.cells[cellId];\n\n    // If cell doesn't exist, add it\n    if (!cell) {\n      const { cellSize } = this;\n      cell = new Uint8Array(cellSize * cellSize * cellSize);\n      this.cells[cellId] = cell;\n    }\n\n    // Return the cell\n    return cell;\n  }\n\n  /**\n   * Finds the corresponding voxel array for the cell for the given voxel coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {Uint8Array} Array of voxels.\n   */\n  getCellForVoxel(x, y, z) {\n    return this.cells[this.computeCellId(x, y, z)];\n  }\n\n  /**\n   * Sets voxel at given coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @param {number} v - The type of voxel to add\n   * @param {boolean} addCell - If true, a new cell will be created to accomodate the voxel if needed\n   */\n  setVoxel(x, y, z, v, addCell = true) {\n    // Get the array of voxels corresponding to the x, y, and z coordinates\n    let cell = this.getCellForVoxel(x, y, z);\n\n    // No cell was found\n    if (!cell) {\n      // If addCell is false, return\n      if (!addCell) {\n        return;\n      }\n      // Otherwise, create a new cell for the voxel\n      cell = this.addCellForVoxel(x, y, z);\n    }\n\n    // Find the index to add the new voxel within the found cell\n    const voxelOffset = this.computeVoxelOffset(x, y, z);\n\n    // Set the new voxel\n    cell[voxelOffset] = v;\n  }\n\n  /**\n   * Gets the corresponding voxel at the given coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {number} Number representing the type of voxel\n   */\n  getVoxel(x, y, z) {\n    // Find the cell that has the voxel at the given coordinates\n    const cell = this.getCellForVoxel(x, y, z);\n\n    // No such cell exists! Default by returning 0\n    if (!cell) {\n      return 0;\n    }\n\n    // Find the index of the voxel within the cell\n    const voxelOffset = this.computeVoxelOffset(x, y, z);\n\n    // Return the voxel that was found\n    return cell[voxelOffset];\n  }\n\n  /**\n   * Generates geometry data for a cell at the given coordinate. Similar to voxels, each cell\n   * is a part of a 3D grid as well.\n   * @example\n   * generateGeometryDataForCell(0, 0, 0);  // Cell created at (0, 0, 0) coordinate\n   * generateGeometryDataForCell(0, 1, 0);  // Cell created above the last one at (0, 1, 0)\n   *\n   * @param {number} cellX\n   * @param {number} cellY\n   * @param {number} cellZ\n   */\n  generateGeometryDataForCell(cellX, cellY, cellZ) {\n    const { cellSize, tileSize, tileTextureWidth, tileTextureHeight } = this;\n\n    // Used for generating the geometry of the final mesh formed by the voxels\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    const colors = [];\n\n    // Calculate origin point of the cell i.e. (0, 0, 0)\n    const startX = cellX * cellSize;\n    const startY = cellY * cellSize;\n    const startZ = cellZ * cellSize;\n\n    // Iterate over y coords\n    for (let y = 0; y < cellSize; ++y) {\n      const voxelY = startY + y;\n      // Iterate over z coords\n      for (let z = 0; z < cellSize; ++z) {\n        const voxelZ = startZ + z;\n        // Iterate over x coords\n        for (let x = 0; x < cellSize; ++x) {\n          const voxelX = startX + x;\n\n          // Get voxel at current x, y, and z coords\n          const voxel = this.getVoxel(voxelX, voxelY, voxelZ);\n\n          // Check if voxel exists (by default, a voxel 0 is empty)\n          if (voxel) {\n            // voxel 0 is sky so for UVs we start at 0\n            const uvVoxel = voxel - 1;\n\n            // There is a voxel here but do we need faces for it?\n            for (const { dir, corners, uvRow } of VoxelWorld.faces) {\n              // The neighboring voxel to the face of our voxel\n              const neighbor = this.getVoxel(\n                voxelX + dir[0],\n                voxelY + dir[1],\n                voxelZ + dir[2]\n              );\n\n              // neighbor voxel is empty (0) in this direction so we need a face\n              if (!neighbor) {\n                // Used to define the indices\n                const ndx = positions.length / 3;\n\n                // Add vertices for the face of the voxel and normals too\n                for (const { pos, uv } of corners) {\n                  positions.push(pos[0] + x, pos[1] + y, pos[2] + z);\n                  normals.push(...dir);\n\n                  // TODO: uv's no longer being used. Might be added in the future though\n                  // Calculates where to grab texture from the texture atlas\n                  // uvVoxel corresponds to the column and uvRow the row to get the texture\n                  uvs.push(\n                    ((uvVoxel + uv[0]) * tileSize) / tileTextureWidth,\n                    1 - ((uvRow + 1 - uv[1]) * tileSize) / tileTextureHeight\n                  );\n\n                  // Add color. Subtract 1 for empty voxels do not correspond with palette array\n                  const color = this.colorPalette.getColorAtIndex(voxel - 1);\n                  colors.push(color.r, color.g, color.b);\n                }\n\n                // Add indices used to draw the face\n                indices.push(ndx, ndx + 1, ndx + 2, ndx + 2, ndx + 1, ndx + 3);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Return object consisting of geometry data for the voxel model\n    return {\n      positions,\n      normals,\n      uvs,\n      indices,\n      colors,\n    };\n  }\n\n  /**\n   * Algorithm for raycasting specialized for use with voxels. Used to check if the\n   * user clicked a voxel in the scene and returns information related to it such as\n   * the coordinates of the successful hit.\n   * The code itself is based upon this paper: http://www.cse.chalmers.se/edu/year/2010/course/TDA361/grid.pdf\n   * @param {*} start\n   * @param {*} end\n   * @returns {Object} HitResults or null if nothing was hit\n   * @returns {Array.<number>} HitResults.position Coordinates of the hit\n   * @returns {Array.<number} HitResults.normal Normal of the hit\n   * @returns {number} HitResults.voxel The type of voxel hit\n   */\n  intersectRay(start, end) {\n    // Get the direction that ray is cast\n    let dx = end.x - start.x;\n    let dy = end.y - start.y;\n    let dz = end.z - start.z;\n\n    // Find the magnitude of the above direction\n    const lenSq = dx * dx + dy * dy + dz * dz;\n    const len = Math.sqrt(lenSq);\n\n    // Change to unit vector so we only have the direction of the ray cast\n    dx /= len;\n    dy /= len;\n    dz /= len;\n\n    // t is a scalar that we use to 'stretch' the ray into the scene to test for intersections\n    let t = 0.0;\n    let ix = Math.floor(start.x);\n    let iy = Math.floor(start.y);\n    let iz = Math.floor(start.z);\n\n    // Dictates how we 'step' from voxel to voxel\n    const stepX = dx > 0 ? 1 : -1;\n    const stepY = dy > 0 ? 1 : -1;\n    const stepZ = dz > 0 ? 1 : -1;\n\n    // The amount of change required to advance one whole voxel\n    const txDelta = Math.abs(1 / dx);\n    const tyDelta = Math.abs(1 / dy);\n    const tzDelta = Math.abs(1 / dz);\n\n    const xDist = stepX > 0 ? ix + 1 - start.x : start.x - ix;\n    const yDist = stepY > 0 ? iy + 1 - start.y : start.y - iy;\n    const zDist = stepZ > 0 ? iz + 1 - start.z : start.z - iz;\n\n    // location of nearest voxel boundary, in units of t\n    let txMax = txDelta < Infinity ? txDelta * xDist : Infinity;\n    let tyMax = tyDelta < Infinity ? tyDelta * yDist : Infinity;\n    let tzMax = tzDelta < Infinity ? tzDelta * zDist : Infinity;\n\n    // Represents the direction we last stepped in. Either x, y, or z\n    let steppedIndex = -1;\n\n    // main loop along raycast vector\n    while (t <= len) {\n      // Get the voxel at the ix, iy, and iz coordinate\n      const voxel = this.getVoxel(ix, iy, iz);\n\n      // Found a non-empty voxel! Return hit information\n      if (voxel) {\n        return {\n          position: [start.x + t * dx, start.y + t * dy, start.z + t * dz],\n          normal: [\n            steppedIndex === 0 ? -stepX : 0,\n            steppedIndex === 1 ? -stepY : 0,\n            steppedIndex === 2 ? -stepZ : 0,\n          ],\n          voxel,\n        };\n      }\n\n      // advance t to next nearest voxel boundary\n      // This is the core if-statement from the research paper\n      if (txMax < tyMax) {\n        if (txMax < tzMax) {\n          ix += stepX;\n          t = txMax;\n          txMax += txDelta;\n          steppedIndex = 0;\n        } else {\n          iz += stepZ;\n          t = tzMax;\n          tzMax += tzDelta;\n          steppedIndex = 2;\n        }\n      } else {\n        if (tyMax < tzMax) {\n          iy += stepY;\n          t = tyMax;\n          tyMax += tyDelta;\n          steppedIndex = 1;\n        } else {\n          iz += stepZ;\n          t = tzMax;\n          tzMax += tzDelta;\n          steppedIndex = 2;\n        }\n      }\n    }\n\n    // Nothing was found, return null\n    return null;\n  }\n\n  /**\n   * Updates the voxel of a cell at the given x, y, and z coordinates. Also,\n   * updates any cells that the voxel is adjacent to.\n   * @param scene - The scene to add the final mesh to\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  updateVoxelGeometry(scene, x, y, z) {\n    const updatedCellIds = {};\n\n    // Check the cell and all surrounding cells when updating voxel geometry\n    for (const offset of this.neighborOffsets) {\n      // Get the coordinates of the current cell to update\n      const ox = x + offset[0];\n      const oy = y + offset[1];\n      const oz = z + offset[2];\n\n      // Get the id of the cell we wish to update\n      const cellId = this.computeCellId(ox, oy, oz);\n\n      // If cell yet not updated, update it!\n      if (!updatedCellIds[cellId]) {\n        updatedCellIds[cellId] = true;\n\n        // Update the cell's geometry\n        this.updateCellGeometry(scene, ox, oy, oz);\n      }\n    }\n  }\n\n  /**\n   * Updates the geometry of the cell with the given coordinates within\n   * the scene.\n   * @param scene - The scene to add the final mesh to\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  updateCellGeometry(scene, x, y, z) {\n    const { cellSize } = this;\n\n    // Find the cell corresponding to the voxel at the x, y, and z coordinates\n    const cellX = Math.floor(x / cellSize);\n    const cellY = Math.floor(y / cellSize);\n    const cellZ = Math.floor(z / cellSize);\n    const cellId = this.computeCellId(x, y, z);\n\n    // Get the mesh corresponding to the given cellId\n    let mesh = this.cellIdToMesh[cellId];\n    // Get the geometry of the mesh. If no mesh exists, create new geometry\n    const geometry = mesh ? mesh.geometry : new THREE.BufferGeometry();\n\n    // Retrieve data for making the geometry for a given cell\n    const {\n      positions,\n      normals,\n      //uvs,\n      indices,\n      colors,\n    } = this.generateGeometryDataForCell(cellX, cellY, cellZ);\n\n    // Set position (vertex) data of cell\n    const positionNumComponents = 3;\n    geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(\n        new Float32Array(positions),\n        positionNumComponents\n      )\n    );\n\n    // Set normal data for cell\n    const normalNumComponents = 3;\n    geometry.setAttribute(\n      \"normal\",\n      new THREE.BufferAttribute(new Float32Array(normals), normalNumComponents)\n    );\n\n    // TODO: Add back if supporting textures\n    // Set uv data for cell\n    /*\n    const uvNumComponents = 2;\n    geometry.setAttribute(\n      \"uv\",\n      new THREE.BufferAttribute(new Float32Array(uvs), uvNumComponents)\n    );\n    */\n\n    const rgbNumComponents = 3;\n    geometry.setAttribute(\n      \"color\",\n      new THREE.BufferAttribute(new Float32Array(colors), rgbNumComponents)\n    );\n\n    // Set index data for cell\n    geometry.setIndex(indices);\n\n    // Comput bounding sphere of the geometry\n    geometry.computeBoundingSphere();\n\n    // If the mesh has not yet been created, create it!\n    if (!mesh) {\n      mesh = new THREE.Mesh(geometry, this.material);\n      mesh.name = cellId;\n      this.cellIdToMesh[cellId] = mesh;\n      scene.add(mesh);\n      mesh.position.set(cellX * cellSize, cellY * cellSize, cellZ * cellSize);\n    }\n  }\n\n  /**\n   * Updates every single cell within the world. Useful for when loading in\n   * a brand new world.\n   * @param {*} scene\n   */\n  updateWorldGeometry(scene) {\n    // Get an array of every cell's key\n    const cellKeys = Object.keys(this.cells);\n\n    // Regex used to extract cell position\n    let regex = /^(-?\\d+),(-?\\d+),(-?\\d+)$/;\n\n    // Update every cell\n    cellKeys.forEach((cellKey) => {\n      // Extract the x, y, and z position of the cell\n      let match = cellKey.match(regex);\n      const x = parseInt(match[1], 10);\n      const y = parseInt(match[2], 10);\n      const z = parseInt(match[3], 10);\n\n      // Update that cell\n      this.updateCellGeometry(\n        scene,\n        x * this.cellSize,\n        y * this.cellSize,\n        z * this.cellSize\n      );\n    });\n  }\n}\n\n/**\n * Array of objects that represent each face of a single voxel.\n * uvRow is the row of the texture atlas to grab an image from\n * dir is the direction of the face\n * corners consist of vertices and uv coordinates for the texture\n */\nVoxelWorld.faces = [\n  {\n    // left\n    uvRow: 0,\n    dir: [-1, 0, 0],\n    corners: [\n      { pos: [0, 1, 0], uv: [0, 1] },\n      { pos: [0, 0, 0], uv: [0, 0] },\n      { pos: [0, 1, 1], uv: [1, 1] },\n      { pos: [0, 0, 1], uv: [1, 0] },\n    ],\n  },\n  {\n    // right\n    uvRow: 0,\n    dir: [1, 0, 0],\n    corners: [\n      { pos: [1, 1, 1], uv: [0, 1] },\n      { pos: [1, 0, 1], uv: [0, 0] },\n      { pos: [1, 1, 0], uv: [1, 1] },\n      { pos: [1, 0, 0], uv: [1, 0] },\n    ],\n  },\n  {\n    // bottom\n    uvRow: 1,\n    dir: [0, -1, 0],\n    corners: [\n      { pos: [1, 0, 1], uv: [1, 0] },\n      { pos: [0, 0, 1], uv: [0, 0] },\n      { pos: [1, 0, 0], uv: [1, 1] },\n      { pos: [0, 0, 0], uv: [0, 1] },\n    ],\n  },\n  {\n    // top\n    uvRow: 2,\n    dir: [0, 1, 0],\n    corners: [\n      { pos: [0, 1, 1], uv: [1, 1] },\n      { pos: [1, 1, 1], uv: [0, 1] },\n      { pos: [0, 1, 0], uv: [1, 0] },\n      { pos: [1, 1, 0], uv: [0, 0] },\n    ],\n  },\n  {\n    // back\n    uvRow: 0,\n    dir: [0, 0, -1],\n    corners: [\n      { pos: [1, 0, 0], uv: [0, 0] },\n      { pos: [0, 0, 0], uv: [1, 0] },\n      { pos: [1, 1, 0], uv: [0, 1] },\n      { pos: [0, 1, 0], uv: [1, 1] },\n    ],\n  },\n  {\n    // front\n    uvRow: 0,\n    dir: [0, 0, 1],\n    corners: [\n      { pos: [0, 0, 1], uv: [0, 0] },\n      { pos: [1, 0, 1], uv: [1, 0] },\n      { pos: [0, 1, 1], uv: [0, 1] },\n      { pos: [1, 1, 1], uv: [1, 1] },\n    ],\n  },\n];\n\nexport default VoxelWorld;\n","/**\n * Brush object used to determine how to paint voxels on the scene.\n */\nclass Brush {\n  constructor(brush = \"add\") {\n    this.setCurrentBrush(brush);\n  }\n\n  // Options for each brush\n  static brushOptions = {\n    add: \"add\",\n    remove: \"remove\",\n    paint: \"paint\",\n  };\n\n  /**\n   * Sets the current brush to one of the available brush options.\n   * @param {string} brushName\n   */\n  setCurrentBrush(brushName) {\n    // Get the brush to set\n    const brush = Brush.brushOptions[brushName];\n\n    // If that brush exists, set it as current\n    if (brush) {\n      this.currentBrush = brush;\n    }\n  }\n}\n\nexport default Brush;\n","/**\n * Internal representation of the ColorPalette React component.\n * Used to track each color of the voxels within the scene.\n */\nclass ColorPalette {\n  constructor(colors = null, selectedColor = 0) {\n    if (colors) {\n      this.colors = colors;\n    } else {\n      this.initializeColorArray();\n    }\n\n    // The currently selected color\n    this.selectedColor = 0;\n  }\n\n  /**\n   * Initializes an array of colors for the color palette. Creates\n   * 128 colors that are all grey by default.\n   */\n  initializeColorArray() {\n    // Palette holds 128 colors by default\n    this.colors = new Array(128);\n\n    // Set all colors to a grey color by default\n    for (let i = 0; i < this.colors.length; ++i) {\n      this.colors[i] = new Color(0.5, 0.5, 0.5);\n    }\n  }\n\n  /**\n   * Sets the color at the given index to the given r, g, b values.\n   * @param {number} index\n   * @param {number} r\n   * @param {number} g\n   * @param {number} b\n   */\n  setColorAtIndex(index, r, g, b) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return;\n\n    // Set the rgb values of the color\n    this.colors[index].r = r;\n    this.colors[index].g = g;\n    this.colors[index].b = b;\n  }\n\n  /**\n   * Returns the color at the given index.\n   * @param {number} index\n   * @returns {Color} The color at the index. Null if not found\n   */\n  getColorAtIndex(index) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return null;\n    return this.colors[index];\n  }\n\n  /**\n   * Returns the currently selected color.\n   * @returns {Color}\n   */\n  getSelectedColor() {\n    return this.colors[this.selectedColor];\n  }\n\n  /**\n   * Changes the currently selected color to another within the colors array.\n   * @param {number} index\n   */\n  setSelectedColor(index) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return null;\n    this.selectedColor = index;\n  }\n\n  /**\n   * Returns the index of the selected color.\n   * @returns {number}\n   */\n  getSelectedColorIndex() {\n    return this.selectedColor;\n  }\n\n  /**\n   * Returns the array of colors currently in the palette.\n   * @returns {Array.Color}\n   */\n  getColorsArray() {\n    return this.colors;\n  }\n}\n\n/**\n * Class that represents a single rgb color with each component being from\n * 0 to 1.\n */\nclass Color {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  /**\n   * Returns a 0-255 value representation of the color.\n   * @returns {Object}\n   */\n  getRGB255() {\n    return { r: this.r * 255, g: this.g * 255, b: this.b * 255 };\n  }\n}\n\nexport default ColorPalette;\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport VoxelWorld from \"./VoxelWorld\";\nimport Brush from \"./Brush\";\nimport ColorPalette from \"./ColorPalette\";\n//import textureAtlas from \"../images/flourish-cc-by-nc-sa.png\";\n\n/**\n * Helper function to return a random integer between the min and max value\n * in a range of [min, max).\n * TODO: This can be removed soon\n * @param {number} min\n * @param {number} max\n * @returns\n */\nfunction randInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/**\n * Has the cell at the given coordinates form a sine wave out of its voxels.\n * @param {VoxelWorld} world - The world to spawn the sine wave in\n * @param {number} cellX\n * @param {number} cellY\n * @param {number} cellZ\n * @param {number} cellSize - Dimensions of the cell\n * @param {number} [v=0] - The type of voxel to spawn. 0 for random\n */\n/*\nfunction createSineWave(world, cellX, cellY, cellZ, cellSize, v = 0) {\n  const startX = cellX * cellSize;\n  const startY = cellY * cellSize;\n  const startZ = cellZ * cellSize;\n\n  // Create a sine wave with our voxels\n  for (let y = 0; y < cellSize; ++y) {\n    for (let z = 0; z < cellSize; ++z) {\n      for (let x = 0; x < cellSize; ++x) {\n        // Calculate the maximum height at the x and z position for a voxel to be placed\n        const height =\n          (Math.sin((x / cellSize) * Math.PI * 2) +\n            Math.sin((z / cellSize) * Math.PI * 3)) *\n            (cellSize / 6) +\n          cellSize / 2;\n\n        // Set voxel if y is below the height\n        if (y < height) {\n          // Set voxel to random texture\n          world.setVoxel(\n            startX + x,\n            startY + y,\n            startZ + z,\n            v ? v : randInt(1, 17)\n          );\n        }\n      }\n    }\n  }\n}\n*/\n\n/**\n * Has the cell at the given coordinates form a flat ground out of its voxels.\n * @param {VoxelWorld} world - The world to spawn flat ground in\n * @param {number} cellX\n * @param {number} cellY\n * @param {number} cellZ\n * @param {number} cellSize - Dimensions of the cell\n * @param {number} [v=0] - The type of voxel to spawn. 0 for random\n */\nfunction createFlatGround(world, cellX, cellY, cellZ, cellSize, v = 0) {\n  const startX = cellX * cellSize;\n  const startY = cellY * cellSize;\n  const startZ = cellZ * cellSize;\n\n  // Create flat ground with our voxels\n  for (let z = 0; z < cellSize; ++z) {\n    for (let x = 0; x < cellSize; ++x) {\n      // Set voxel to random texture or v if given\n      world.setVoxel(startX + x, startY, startZ + z, v ? v : randInt(1, 17));\n    }\n  }\n}\n\n/**\n * TODO: Temporary function for creating the texture atlas. Will be removed\n * during the creation of the ColorPalette code.\n * @param {*} render\n * @return texture\n */\n/*\nfunction createTextureAtlas(render) {\n  // Load texture atlas\n  const loader = new THREE.TextureLoader();\n  const texture = loader.load(textureAtlas, render);\n  texture.magFilter = THREE.NearestFilter;\n  texture.minFilter = THREE.NearestFilter;\n  return texture;\n}\n*/\n\n/**\n * Class used to interface with the scene and handles the main render loop.\n */\nclass VoxelEditor {\n  constructor(options) {\n    this.canvas = options.canvas;\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n\n    // Length, width, and height of each cell in the VoxelWorld\n    this.cellSize = 32;\n\n    // Initialize the camera\n    this.createCamera();\n\n    // Initialize orbit controls\n    this.createOrbitControls();\n\n    // Create the scene\n    this.scene = new THREE.Scene();\n\n    // Setting background color to the same one Blender uses\n    this.scene.background = new THREE.Color(\"#3C3C3C\");\n\n    // Add two directional lights to the scene\n    this.addLight(-1, 2, 4);\n    this.addLight(1, -1, -2);\n\n    // TODO: Remove these variables soon. Not needed for ColorPalette\n    const tileSize = 16;\n    const tileTextureWidth = 256;\n    const tileTextureHeight = 64;\n    //const texture = createTextureAtlas(this.render);\n\n    // Create material for the voxel model\n    const material = new THREE.MeshLambertMaterial({\n      // TODO: add texture back if using textures\n      //map: texture,\n      side: THREE.DoubleSide,\n      alphaTest: 0.1,\n      transparent: true,\n      vertexColors: true,\n    });\n\n    // Load from previous world or set defaults\n    const { world } = options;\n    const colorPalette = world ? world.colorPalette : new ColorPalette();\n    const cells = world ? world.cells : {};\n\n    // Create a new VoxelWorld that will manage our voxels\n    this.world = new VoxelWorld({\n      cellSize: this.cellSize,\n      tileSize,\n      tileTextureWidth,\n      tileTextureHeight,\n      material,\n      colorPalette,\n      cells,\n    });\n\n    // If there is no pre-existing world, create flat ground by default\n    if (!world) {\n      // Create a floor to the world\n      createFlatGround(this.world, 0, 0, 0, this.cellSize, 1); // Center\n    }\n\n    // Update geometry of the entire world\n    this.world.updateWorldGeometry(this.scene);\n\n    // Used with requestRenderIfNotRequested() function\n    this.renderRequested = false;\n\n    // Mouse object representing the position of mouse clicks.\n    this.mouse = {\n      x: 0,\n      y: 0,\n      moveX: 0,\n      moveY: 0,\n    };\n\n    // Listen for mouse clicks\n    this.canvas.addEventListener(\n      \"pointerdown\",\n      (event) => {\n        event.preventDefault();\n        // Record where we first clicked\n        this.recordStartPosition(event);\n\n        // Record mouse movement\n        window.addEventListener(\"pointermove\", this.recordMovement);\n\n        // Add voxel upon releasing mouse click if movement is small. Other,\n        // user is orbiting the camera\n        window.addEventListener(\"pointerup\", this.placeVoxelIfNoMovement);\n      },\n      { passive: false }\n    );\n\n    // Listen for touch events\n    this.canvas.addEventListener(\n      \"touchstart\",\n      (event) => {\n        // prevent scrolling\n        event.preventDefault();\n      },\n      { passive: false }\n    );\n\n    // Listen for camera orbit events\n    this.controls.addEventListener(\"change\", this.requestRenderIfNotRequested);\n\n    // Listen for window resizing events\n    window.addEventListener(\"resize\", this.requestRenderIfNotRequested);\n\n    // Create new brush\n    this.brush = new Brush();\n\n    // Start render loop\n    this.render();\n  }\n\n  /**\n   * Helper function used to create the camera and set it to a default position.\n   * @param {number} [fov=75] - field of view\n   * @param {number} [aspect=2] - Aspect. Canvas default is 2\n   * @param {number} [near=0.1]\n   * @param {number} [far=1000]\n   */\n  createCamera(fov = 75, aspect = 2, near = 0.1, far = 1000) {\n    // Create a new perspective camera\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n    // TODO: This is an arbitrary starting position. Consider an alternative\n    this.camera.position.set(\n      -this.cellSize * 0.2,\n      this.cellSize * 0.3,\n      -this.cellSize * 0.2\n    );\n  }\n\n  /**\n   * Helper function to create the orbit controls.\n   */\n  createOrbitControls() {\n    // Create the orbit controls\n    this.controls = new OrbitControls(this.camera, this.canvas);\n\n    // Orbit controls starts by targeting center of scene\n    this.controls.target.set(this.cellSize / 2, 0, this.cellSize / 2);\n\n    // Controls must be updated before they can be used\n    this.controls.update();\n  }\n\n  /**\n   * Adds a directional light to the scene at the given x, y, and z position.\n   * Remember, the default position of the directional light's target is (0, 0, 0).\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  addLight(x, y, z) {\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(x, y, z);\n    this.scene.add(light);\n  }\n\n  /**\n   * Checks if the renderer needs to resize to account for changes in screen\n   * width or height.\n   * @param {WebGLRenderer} renderer\n   * @returns {boolean} True if the renderer resized. False otherwise.\n   */\n  resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    const needResize = canvas.width !== width || canvas.height !== height;\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n    return needResize;\n  }\n\n  /**\n   * Main render loop.\n   */\n  render = () => {\n    this.renderRequested = undefined;\n\n    if (this.resizeRendererToDisplaySize(this.renderer)) {\n      this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n      this.camera.updateProjectionMatrix();\n    }\n\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Used to make a render update request only if one hasn't been made already.\n   */\n  requestRenderIfNotRequested = () => {\n    if (!this.renderRequested) {\n      this.renderRequested = true;\n      requestAnimationFrame(this.render);\n    }\n  };\n\n  /**\n   * Finds the x and y coordinate of a mouse click relative to the canvas.\n   * @param {Event} event\n   * @returns {Object} Object with x and y coordinates of click relative to canvas\n   */\n  getCanvasRelativePosition(event) {\n    const { canvas } = this;\n    const rect = canvas.getBoundingClientRect();\n\n    // Calculate the x and y of click relative to the canvas\n    return {\n      x: ((event.clientX - rect.left) * canvas.width) / rect.width,\n      y: ((event.clientY - rect.top) * canvas.height) / rect.height,\n    };\n  }\n\n  /**\n   * Handler for adding, removing, or painting a voxel based on the given brush\n   * and where the user clicked.\n   * @param {Event} event\n   */\n  placeVoxel(event) {\n    // Find position of mouse click relative to canvas\n    const pos = this.getCanvasRelativePosition(event);\n    const x = (pos.x / this.canvas.width) * 2 - 1;\n    const y = (pos.y / this.canvas.height) * -2 + 1; // note we flip Y\n\n    // Get the starting and ending vectors for our raycast\n    const start = new THREE.Vector3();\n    const end = new THREE.Vector3();\n    start.setFromMatrixPosition(this.camera.matrixWorld);\n    end.set(x, y, 1).unproject(this.camera);\n\n    // Cast a ray into the scene\n    const intersection = this.world.intersectRay(start, end);\n\n    // If raycast was successful, place a voxel with the information returned\n    if (intersection) {\n      // Set voxelId depending on brush option. 0 removes voxels\n      const voxelId =\n        this.brush.currentBrush === Brush.brushOptions.remove\n          ? 0\n          : this.world.colorPalette.getSelectedColorIndex() + 1;\n\n      // the intersection point is on the face. That means\n      // the math imprecision could put us on either side of the face.\n      // so go half a normal into the voxel if removing/painting\n      // or half a normal out if adding\n      const pos = intersection.position.map((v, ndx) => {\n        return (\n          v +\n          intersection.normal[ndx] *\n            (this.brush.currentBrush === Brush.brushOptions.add ? 0.5 : -0.5)\n        );\n      });\n\n      // Set voxel at the pos position with new voxelID\n      this.world.setVoxel(...pos, voxelId);\n\n      // Update the cell associated with the position of the new voxel\n      this.world.updateVoxelGeometry(this.scene, ...pos);\n\n      // Update render frame\n      this.requestRenderIfNotRequested();\n    }\n  }\n\n  /**\n   * Reset mouse movement and begin recording.\n   * @param {Event} event\n   */\n  recordStartPosition = (event) => {\n    const { mouse } = this;\n    mouse.x = event.clientX;\n    mouse.y = event.clientY;\n    mouse.moveX = 0;\n    mouse.moveY = 0;\n  };\n\n  /**\n   * Callback function used to record how far the mouse has moved since started recording.\n   * @param {Event} event\n   */\n  recordMovement = (event) => {\n    const { mouse } = this;\n    mouse.moveX += Math.abs(mouse.x - event.clientX);\n    mouse.moveY += Math.abs(mouse.y - event.clientY);\n  };\n\n  /**\n   * Callback function used to check if the user meant to set a voxel instead\n   * of orbiting the camera.\n   * @param {Event} event\n   */\n  placeVoxelIfNoMovement = (event) => {\n    const { mouse } = this;\n    // Mouse hardly moved, user likely intended to place a voxel\n    if (mouse.moveX < 5 && mouse.moveY < 5) {\n      // TODO: Remove global variable currentBrush\n      this.placeVoxel(event);\n    }\n\n    // Stop recording movement and checks to place voxel\n    window.removeEventListener(\"pointermove\", this.recordMovement);\n    window.removeEventListener(\"pointerup\", this.placeVoxelIfNoMovement);\n  };\n\n  /**\n   * Called whenever a new color is selected.\n   * @param {number} index - Index of the changed color\n   * @param {r} r - Red color from 0-1\n   * @param {g} g - Green color from 0-1\n   * @param {b} b - Blue color from 0-1\n   */\n  onSelectedColorChange = (index, r, g, b) => {\n    // Update the color\n    this.world.colorPalette.setColorAtIndex(index, r, g, b);\n\n    // Updated the world with new color\n    this.world.updateWorldGeometry(this.scene);\n\n    // Update render frame\n    this.requestRenderIfNotRequested();\n  };\n\n  /**\n   * Updates which voxel the user is placing/painting now from the palette.\n   * @param {number} index\n   */\n  onNewSelectedColor = (index) => {\n    // Update the currently selected color for adding/painting\n    this.world.colorPalette.setSelectedColor(index);\n  };\n}\n\nexport default VoxelEditor;\n","import React from \"react\";\nimport GUIController from \"./GUIController\";\nimport VoxelEditor from \"../modules/VoxelsEditor\";\n\n/**\n * The main driving component for the application. Sets up the rest of\n * the user interface and directly communicates with the Voxel.js module.\n * @extends React.Component\n */\nclass VoxelManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // The VoxelEditor itself that handles the 3D scene\n    this.voxelEditor = null;\n  }\n\n  /**\n   * Takes the given canvas Ref and renders the voxel world.\n   * @param {Ref} canvasRef\n   */\n  createVoxelWorld = (canvasRef) => {\n    if (!canvasRef) return;\n\n    if (!this.voxelEditor) {\n      this.voxelEditor = new VoxelEditor({ canvas: canvasRef.current });\n    } else {\n      const world = this.voxelEditor.world;\n      this.voxelEditor = new VoxelEditor({ canvas: canvasRef.current, world });\n    }\n  };\n\n  /**\n   * Changes the brush currently being used.\n   * @param {string} brushName - name of the brush to set\n   */\n  setCurrentBrush = (brushName) => {\n    if (this.voxelEditor) {\n      this.voxelEditor.brush.setCurrentBrush(brushName);\n    }\n  };\n\n  /**\n   * Returns color palette data from the VoxelWorld.\n   * @returns {Array.Color}\n   */\n  onGetColorData = () => {\n    // Return empty array if voxelEditor not ready\n    // TODO: Redo this.\n    if (!this.voxelEditor)\n      return {\n        colors: [],\n        selectedColorIndex: 0,\n        currentColor: { r: 127.5, g: 127.5, b: 127.5 }, // default to a grey color\n      };\n\n    const { colorPalette } = this.voxelEditor.world;\n    const { r, g, b } = colorPalette.getSelectedColor().getRGB255();\n    return {\n      colors: colorPalette.getColorsArray(),\n      selectedColorIndex: colorPalette.getSelectedColorIndex(),\n      currentColor: { r, g, b },\n    };\n  };\n\n  /**\n   * Called whenever a new color is selected.\n   * @param {number} index - Index of the changed color\n   * @param {Object} color\n   */\n  onSelectedColorChange = (index, color) => {\n    if (this.voxelEditor) {\n      const { r, g, b } = color;\n\n      // Adjust the color to be on a 0-1 range\n      this.voxelEditor.onSelectedColorChange(index, r / 255, g / 255, b / 255);\n    }\n  };\n\n  /**\n   * Tells the VoxelEditor what color of voxel the user is placing/painting now.\n   * @param {number} index\n   */\n  onNewSelectedColor = (index) => {\n    if (this.voxelEditor) {\n      this.voxelEditor.onNewSelectedColor(index);\n    }\n  };\n\n  render() {\n    return (\n      <GUIController\n        onCanvasCreation={this.createVoxelWorld}\n        onBrushChange={this.setCurrentBrush}\n        onGetColorData={this.onGetColorData}\n        onSelectedColorChange={this.onSelectedColorChange}\n        onNewSelectedColor={this.onNewSelectedColor}\n      />\n    );\n  }\n}\n\nexport default VoxelManager;\n","import \"./App.css\";\nimport VoxelManager from \"./VoxelManager\";\n\nconst App = () => {\n  return <VoxelManager />;\n};\n\nexport default App;\n","import \"semantic-ui-css/semantic.min.css\";\nimport \"./ColorVariables.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}