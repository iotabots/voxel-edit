{"version":3,"sources":["components/Viewport.js","components/Brush.js","components/File.js","components/Render.js","components/ColorPalette.js","components/GUIController.js","modules/VoxelWorld.js","modules/Brush.js","modules/ColorPalette.js","modules/VoxelsEditor.js","components/VoxelManager.js","components/App.js","index.js"],"names":["Viewport","props","canvasRef","React","createRef","this","callbacks","onCanvasCreation","className","ref","Component","Brush","handleBrushClick","e","name","setState","activeBrush","onBrushChange","state","Fragment","Menu","Item","active","onClick","File","handleSaveProject","saveInputValue","length","projectJSON","JSON","stringify","onGetProjectData","blob","Blob","type","FileSaver","saveAs","isSaveModalOpen","onLoadProject","loadFileInput","click","handleFileSelected","file","files","loadFileReader","readAsText","replace","handleFileRead","projectData","parse","target","result","onLoadProjectData","handleSaveInputChange","value","trim","maxNameLength","handleExportInputChange","exportInputValue","createExportModal","isExportInputEmpty","Modal","onClose","isExportModalOpen","onOpen","open","closeIcon","size","Header","Content","Input","action","content","exportType","disabled","onExportObj","fluid","onChange","error","placeholder","createSaveModal","isSaveInputEmpty","createExportSubMenu","Dropdown","text","pointing","document","createElement","accept","addEventListener","FileReader","Render","onExportImage","ColorCell","color","id","isActive","getRGB255","r","g","b","onColorCellClick","style","backgroundColor","ColorPalette","updateColorData","onGetColorData","currentColor","selectedColorIndex","isColorsFull","newState","Object","keys","handlePickerChange","rgb","onSelectedColorChange","onNewSelectedColor","onAddCellClick","onAddColor","getColorCells","buttons","colors","forEach","index","push","getAddColorCell","Icon","disableAlpha","GUIController","updateMobileState","isMobile","window","innerWidth","handleAccordionIndicesChange","componentName","desktop","activeAccordionIndices","pos","indexOf","splice","createDesktopBrush","brushSettings","Segment","Group","inverted","as","Subheader","Accordion","exclusive","Title","includes","titleProps","vertical","brush","createDesktopColorPalette","colorPalette","mobile","isColorModalOpen","removeEventListener","viewport","Grid","padded","height","Row","paddingTop","paddingBottom","Column","render","width","overflowY","createDesktopViewport","scrolling","Description","Actions","Button","primary","innerHeight","fixed","createMobileModal","overflowX","createMobileGUI","createDesktopGUI","VoxelWorld","options","cellSize","tileSize","tileTextureWidth","tileTextureHeight","material","cellSliceSize","cells","cellIdToMesh","neighborOffsets","x","y","z","voxelX","THREE","euclideanModulo","cellX","Math","floor","cellY","cellZ","cellId","computeCellId","cell","Uint8Array","v","addCell","getCellForVoxel","addCellForVoxel","voxelOffset","computeVoxelOffset","positions","normals","uvs","indices","startX","startY","startZ","voxelY","voxelZ","voxel","getVoxel","uvVoxel","faces","dir","corners","uvRow","ndx","uv","getColorAtIndex","start","end","dx","dy","dz","lenSq","len","sqrt","t","ix","iy","iz","stepX","stepY","stepZ","txDelta","abs","tyDelta","tzDelta","xDist","yDist","zDist","txMax","Infinity","tyMax","tzMax","steppedIndex","position","normal","scene","updatedCellIds","offset","ox","oy","oz","updateCellGeometry","mesh","geometry","generateGeometryDataForCell","setAttribute","Float32Array","setIndex","computeBoundingSphere","add","set","cellKeys","regex","cellKey","match","parseInt","setCurrentBrush","brushName","brushOptions","currentBrush","remove","paint","selectedColor","Color","maxColors","newColors","map","randInt","min","max","random","VoxelEditor","renderRequested","undefined","resizeRendererToDisplaySize","renderer","camera","aspect","canvas","clientWidth","clientHeight","updateProjectionMatrix","controls","update","requestRenderIfNotRequested","requestAnimationFrame","recordStartPosition","event","mouse","clientX","clientY","moveX","moveY","recordMovement","placeVoxelIfNoMovement","placeVoxel","world","setColorAtIndex","updateWorldGeometry","setSelectedColor","voxelWorld","getColorsArray","getSelectedColorIndex","setNewColorsArray","imageName","toBlob","exporter","blobType","OBJExporter","PLYExporter","STLExporter","ColladaExporter","antialias","createCamera","createOrbitControls","background","addLight","side","alphaTest","transparent","vertexColors","setVoxel","createFlatGround","preventDefault","passive","fov","near","far","OrbitControls","light","domElement","needResize","setSize","rect","getBoundingClientRect","left","top","getCanvasRelativePosition","setFromMatrixPosition","matrixWorld","unproject","intersection","intersectRay","voxelId","updateVoxelGeometry","VoxelManager","createVoxelWorld","voxelEditor","current","getSelectedColor","addColor","forceUpdate","getCallbacksObject","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27b2a2e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Viewport.css\";\n\n/**\n * Handles the 3D viewport and surrounding GUI for the application.\n * @property {Ref} canvasRef - Reference to the canvas\n *\n * @extends React.Component\n */\nclass Viewport extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Reference to canvas element\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // Canvas is ready to be drawn on\n    this.props.callbacks.onCanvasCreation(this.canvasRef);\n  }\n\n  render() {\n    return <canvas className=\"viewportCanvas\" ref={this.canvasRef} />;\n  }\n}\n\nexport default Viewport;\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\n/**\n * Allows user to switch between basic brush options such as add, remove, and paint.\n * @extends React.Component\n */\nclass Brush extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeBrush: \"add\",\n    };\n  }\n\n  componentDidMount() {\n    // Send the initial brush name to parent component\n    this.props.callbacks.onBrushChange(this.state.activeBrush);\n  }\n\n  /**\n   * Handler for each brush option. Upon click, updates the currently\n   * selected brush.\n   * @param {Event} e - React's original SyntheticEvent\n   * @param {data} props - Prop data from the Menu.Item\n   */\n  handleBrushClick = (e, { name }) => {\n    // Update state with current brush.\n    this.setState({ activeBrush: name });\n\n    // Send active brush name to parent component\n    this.props.callbacks.onBrushChange(name);\n  };\n\n  render() {\n    const { activeBrush } = this.state;\n\n    return (\n      <React.Fragment>\n        <Menu.Item\n          name=\"add\"\n          active={activeBrush === \"add\"}\n          onClick={this.handleBrushClick}\n        >\n          Add Voxel\n        </Menu.Item>\n        <Menu.Item\n          name=\"remove\"\n          active={activeBrush === \"remove\"}\n          onClick={this.handleBrushClick}\n        >\n          Remove Voxel\n        </Menu.Item>\n        <Menu.Item\n          name=\"paint\"\n          active={activeBrush === \"paint\"}\n          onClick={this.handleBrushClick}\n        >\n          Paint Voxel\n        </Menu.Item>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Brush;\n","import React from \"react\";\nimport { Dropdown, Modal, Input } from \"semantic-ui-react\";\nimport FileSaver from \"file-saver\";\n\n/**\n * Allows the user to perform file related actions such as save their\n * project or load one.\n * @TODO File is already a class used within the browser. Rename this! It might\n * be time to start referring to all components as just SomethingComponent or similar.\n *\n * @property {Input} loadFileInput - Input used for selecting project file to load\n * @property {FileReader} loadFileReader - Reads data from selected project file\n * @property {number} maxNameLength - Max chars a user can enter for their filename. Default 100\n * @extends React.Component\n */\nclass File extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSaveModalOpen: false,\n      saveInputValue: \"\",\n      isExportModalOpen: false,\n      exportInputValue: \"\",\n      exportType: \"\",\n    };\n\n    // Create input for allowing users to select their project to load\n    this.loadFileInput = document.createElement(\"input\");\n    this.loadFileInput.type = \"file\";\n    this.loadFileInput.accept = \".json\";\n    this.loadFileInput.addEventListener(\"change\", this.handleFileSelected);\n\n    // Create FileReader for loading user projects\n    this.loadFileReader = new FileReader();\n    this.loadFileReader.addEventListener(\"load\", this.handleFileRead);\n\n    // Maximum number of characters the user can enter into the save input\n    this.maxNameLength = 100;\n  }\n\n  /**\n   * Callback for when users wish to save their project. Creates a JSON file\n   * with the contents of the 3D scene then saves locally to the user's device.\n   */\n  handleSaveProject = (e) => {\n    const { saveInputValue } = this.state;\n\n    // Prevent users from saving an empty filename\n    if (saveInputValue.length === 0) return;\n\n    // Get JSON that represents the project\n    const projectJSON = JSON.stringify(this.props.callbacks.onGetProjectData());\n\n    // Create the blob to download project json\n    let blob = new Blob([projectJSON], {\n      type: \"application/json\",\n    });\n\n    // Download it\n    FileSaver.saveAs(blob, saveInputValue + \".json\");\n\n    // Save complete, close modal\n    this.setState({ isSaveModalOpen: false });\n  };\n\n  /**\n   * Callback for when users wish to load a pre-existing project.\n   */\n  onLoadProject = () => {\n    this.loadFileInput.click();\n  };\n\n  /**\n   * Handler for when the users selects the file they wish to load.\n   * @param {Event} e\n   */\n  handleFileSelected = (e) => {\n    // Get the file to load\n    const file = this.loadFileInput.files[0];\n\n    // If no file found, return\n    if (!file) return;\n\n    // Read the file\n    this.loadFileReader.readAsText(file);\n\n    // Make the name of the file the new saveInputValue\n    const saveInputValue = file.name.replace(/(.json)$/, \"\");\n    this.setState({ saveInputValue });\n  };\n\n  /**\n   * Handler for reading the data from the user's selected project file.\n   * @param {Event} e\n   */\n  handleFileRead = (e) => {\n    // Convert JSON file into JavaScript object\n    const projectData = JSON.parse(e.target.result);\n\n    // Load project into the scene\n    this.props.callbacks.onLoadProjectData(projectData);\n  };\n\n  /**\n   * Handler for changes in the save input. Helps to maintain a controlled input.\n   * @param {Event} e\n   */\n  handleSaveInputChange = (e) => {\n    let { value } = e.target;\n\n    // Trim any excess white-space\n    value = value.trim();\n\n    if (value.length <= this.maxNameLength) {\n      this.setState({ saveInputValue: value });\n    }\n  };\n\n  /**\n   * Handler for changes in the export input. Helps to maintain a controlled input.\n   * @param {Event} e\n   */\n  handleExportInputChange = (e) => {\n    let { value } = e.target;\n\n    // Trim any excess white-space\n    value = value.trim();\n\n    if (value.length <= this.maxNameLength) {\n      this.setState({ exportInputValue: value });\n    }\n  };\n\n  /**\n   * Creates the modal for when the user is exporting to a some 3D object file\n   * @returns {JSX}\n   */\n  createExportModal = () => {\n    // True is empty, false otherwise\n    const isExportInputEmpty = this.state.exportInputValue.length === 0;\n\n    return (\n      <Modal\n        onClose={() => this.setState({ isExportModalOpen: false })}\n        onOpen={() => this.setState({ isExportModalOpen: true })}\n        open={this.state.isExportModalOpen}\n        closeIcon\n        size=\"mini\"\n      >\n        <Modal.Header>Export Model As...</Modal.Header>\n        <Modal.Content>\n          <Input\n            action={{\n              content: `Export .${this.state.exportType}`,\n              disabled: isExportInputEmpty,\n              onClick: this.onExportObj,\n            }}\n            fluid\n            value={this.state.exportInputValue}\n            onChange={this.handleExportInputChange}\n            error={isExportInputEmpty}\n            placeholder=\"Enter export name...\"\n          />\n        </Modal.Content>\n      </Modal>\n    );\n  };\n\n  /**\n   * Creates the modal for when the user is saving their project.\n   * @returns {JSX}\n   */\n  createSaveModal = () => {\n    // True is empty, false otherwise\n    const isSaveInputEmpty = this.state.saveInputValue.length === 0;\n\n    return (\n      <Modal\n        onClose={() => this.setState({ isSaveModalOpen: false })}\n        onOpen={() => this.setState({ isSaveModalOpen: true })}\n        open={this.state.isSaveModalOpen}\n        closeIcon\n        size=\"mini\"\n      >\n        <Modal.Header>Save Project As...</Modal.Header>\n        <Modal.Content>\n          <Input\n            action={{\n              content: \"Save Project\",\n              disabled: isSaveInputEmpty,\n              onClick: this.handleSaveProject,\n            }}\n            fluid\n            value={this.state.saveInputValue}\n            onChange={this.handleSaveInputChange}\n            error={isSaveInputEmpty}\n            placeholder=\"Enter project name...\"\n          />\n        </Modal.Content>\n      </Modal>\n    );\n  };\n\n  /**\n   * Creates a sub-menu for each export option\n   * @returns {JSX}\n   */\n  createExportSubMenu = () => {\n    return (\n      <Dropdown text=\"Export\" pointing=\"left\" className=\"link item\">\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={() =>\n              this.setState({ isExportModalOpen: true, exportType: \"dae\" })\n            }\n          >\n            Collada (.dae)\n          </Dropdown.Item>\n\n          <Dropdown.Item\n            onClick={() =>\n              this.setState({ isExportModalOpen: true, exportType: \"ply\" })\n            }\n          >\n            Stanford (.ply)\n          </Dropdown.Item>\n\n          <Dropdown.Item\n            onClick={() =>\n              this.setState({ isExportModalOpen: true, exportType: \"stl\" })\n            }\n          >\n            Stl (.stl)\n          </Dropdown.Item>\n\n          <Dropdown.Item\n            onClick={() =>\n              this.setState({ isExportModalOpen: true, exportType: \"obj\" })\n            }\n          >\n            Wavefront (.obj)\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  };\n\n  /**\n   * Exports the voxel model to an Obj file.\n   */\n  onExportObj = () => {\n    // Get the export type and what to name it\n    const { exportType, exportInputValue } = this.state;\n\n    // Export the model\n    this.props.callbacks.onExportObj(exportInputValue, exportType);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.createSaveModal()}\n        {this.createExportModal()}\n        <Dropdown text=\"File\" pointing className=\"link item\">\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => this.setState({ isSaveModalOpen: true })}\n            >\n              Save Project\n            </Dropdown.Item>\n            <Dropdown.Item onClick={this.onLoadProject}>\n              Load Project\n            </Dropdown.Item>\n\n            {this.createExportSubMenu()}\n          </Dropdown.Menu>\n        </Dropdown>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default File;\n","import React from \"react\";\nimport { Dropdown, Modal, Input } from \"semantic-ui-react\";\n\n/**\n * Allows the user to perform rendering related actions. Mostly, saving\n * their work to a .png file.\n *\n * @property {number} maxNameLength - Max chars a user can enter for their render file name\n * @extends React.Component\n */\nclass Render extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isExportModalOpen: false,\n      exportInputValue: \"\",\n    };\n\n    // Maximum number of characters the user can enter into the export input\n    this.maxNameLength = 100;\n  }\n\n  /**\n   * Exports current frame of canvas to an image and closes the export modal.\n   */\n  onExportImage = () => {\n    // Export the image\n    this.props.callbacks.onExportImage(this.state.exportInputValue);\n\n    // Close the modal\n    this.setState({ isExportModalOpen: false });\n  };\n\n  /**\n   * Handler for changes in the export input.\n   * @param {Event} e\n   */\n  handleExportInputChange = (e) => {\n    let { value } = e.target;\n\n    // Trim any excess white-space\n    value = value.trim();\n\n    if (value.length <= this.maxNameLength) {\n      this.setState({ exportInputValue: value });\n    }\n  };\n\n  createExportModal = () => {\n    // True is empty, false otherwise\n    const isExportInputEmpty = this.state.exportInputValue.length === 0;\n\n    return (\n      <Modal\n        onClose={() => this.setState({ isExportModalOpen: false })}\n        onOpen={() => this.setState({ isExportModalOpen: true })}\n        open={this.state.isExportModalOpen}\n        closeIcon\n        size=\"mini\"\n      >\n        <Modal.Header>Export Image As...</Modal.Header>\n        <Modal.Content>\n          <Input\n            action={{\n              content: \"Export Image\",\n              disabled: isExportInputEmpty,\n              onClick: this.onExportImage,\n            }}\n            fluid\n            value={this.state.exportInputValue}\n            onChange={this.handleExportInputChange}\n            error={isExportInputEmpty}\n            placeholder=\"Enter image name...\"\n          />\n        </Modal.Content>\n      </Modal>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.createExportModal()}\n        <Dropdown text=\"Render\" pointing className=\"link item\">\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => this.setState({ isExportModalOpen: true })}\n            >\n              Export Scene to Image\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Render;\n","import React from \"react\";\nimport \"./ColorPalette.css\";\nimport { ChromePicker } from \"react-color\";\nimport { Icon } from \"semantic-ui-react\";\n\n/**\n * Represents each individual color on the color palette.\n * @param {*} props\n * @returns {JSX}\n */\nconst ColorCell = (props) => {\n  const { color, id, isActive } = props;\n  const { r, g, b } = color.getRGB255();\n\n  return (\n    <div\n      onClick={() => {\n        props.onColorCellClick(id, { r, g, b });\n      }}\n      className={`color-cell ${isActive ? \"active\" : \"\"}`}\n      style={{\n        backgroundColor: `rgb(${r}, ${g}, ${b})`,\n      }}\n    ></div>\n  );\n};\n\n/**\n * Allows the user to select what colors they wish to paint with,\n * choose new colors to paint with, and select the color that they\n * are currently painting with.\n * @extends React.Component\n */\nclass ColorPalette extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Get data from parent component\n    const {\n      currentColor,\n      selectedColorIndex,\n      isColorsFull,\n    } = this.props.callbacks.onGetColorData();\n\n    this.state = {\n      currentColor,\n      selectedColorIndex,\n      isColorsFull,\n    };\n  }\n\n  /**\n   * Checks for changes in color data from the onGetColorData() prop. If\n   * there are any, updates the state.\n   */\n  updateColorData = () => {\n    const {\n      currentColor,\n      selectedColorIndex,\n      isColorsFull,\n    } = this.props.callbacks.onGetColorData();\n\n    let newState = {};\n\n    if (this.state.isColorsFull !== isColorsFull) {\n      newState.isColorsFull = isColorsFull;\n    }\n\n    if (this.state.selectedColorIndex !== selectedColorIndex) {\n      newState.selectedColorIndex = selectedColorIndex;\n    }\n\n    const { r, g, b } = this.state.currentColor;\n    if (r !== currentColor.r || g !== currentColor.g || b !== currentColor.b) {\n      newState.currentColor = currentColor;\n    }\n\n    if (Object.keys(newState).length !== 0) {\n      this.setState(newState);\n    }\n  };\n\n  componentDidUpdate() {\n    this.updateColorData();\n  }\n\n  /**\n   * Handles color picker change.\n   * @param {*} rgb\n   */\n  handlePickerChange = ({ rgb }) => {\n    // Tell the parent that there was a change in color\n    this.props.callbacks.onSelectedColorChange(\n      this.state.selectedColorIndex,\n      rgb\n    );\n\n    this.updateColorData();\n  };\n\n  /**\n   * Updates the currently selected color cell to the given id\n   * @param {number} id\n   * @param {string} color - Color of the cell\n   */\n  onColorCellClick = (id, color) => {\n    // Tell the parent that there is a new selected color/cell\n    this.props.callbacks.onNewSelectedColor(id);\n\n    this.updateColorData();\n  };\n\n  /**\n   * Handles when the add cell button is clicked.\n   */\n  onAddCellClick = () => {\n    // Add a new color to the palette\n    this.props.callbacks.onAddColor();\n\n    this.updateColorData();\n  };\n\n  /**\n   * Creates the JSX for all of the color select buttons.\n   * @returns {JSX}\n   */\n  getColorCells = () => {\n    // Create buttons for each color\n    let buttons = [];\n    const { colors } = this.props.callbacks.onGetColorData();\n    colors.forEach((color, index) => {\n      buttons.push(\n        <ColorCell\n          key={index}\n          id={index}\n          onColorCellClick={this.onColorCellClick}\n          color={color}\n          isActive={index === this.state.selectedColorIndex}\n        />\n      );\n    });\n\n    return buttons;\n  };\n\n  /**\n   * Creates the JSX for the add color cell. If the internal ColorPalette's\n   * colors array is full, returns null instead.\n   * @returns {JSX}\n   */\n  getAddColorCell = () => {\n    if (this.state.isColorsFull) return null;\n\n    return (\n      <div className=\"color-cell add-cell-btn\" onClick={this.onAddCellClick}>\n        <Icon name=\"plus\" />\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"color-cell-container\">\n          {this.getColorCells()}\n          {this.getAddColorCell()}\n        </div>\n        <ChromePicker\n          color={this.state.currentColor}\n          disableAlpha={true}\n          onChange={this.handlePickerChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ColorPalette;\n","import React from \"react\";\nimport Viewport from \"./Viewport\";\nimport Brush from \"./Brush\";\nimport File from \"./File\";\n//import Edit from \"./Edit\";\nimport Render from \"./Render\";\nimport ColorPalette from \"./ColorPalette\";\nimport {\n  Modal,\n  Button,\n  Grid,\n  Segment,\n  Menu,\n  Accordion,\n  Header,\n  Icon,\n} from \"semantic-ui-react\";\n\n/**\n * Handles switching between both desktop and mobile versions of the\n * UI. Whenever one of its chidlren updates, it will pass that data\n * up to its parent component.\n * @extends React.Component\n */\nclass GUIController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMobile: false,\n      mobile: {\n        isColorModalOpen: false,\n      },\n      desktop: {\n        brushSettings: {\n          activeAccordionIndices: [0],\n        },\n        colorPalette: {\n          activeAccordionIndices: [0],\n        },\n      },\n    };\n  }\n\n  /**\n   * Handler for screen resize events that updates whether or not the application\n   * should currently be using the mobile or desktop GUI.\n   */\n  updateMobileState = () => {\n    // If width below 768, use mobile GUI\n    const isMobile = window.innerWidth < 768;\n\n    this.setState({ isMobile });\n  };\n\n  /**\n   * Toggles the accordion at the given index for the given state with a\n   * activeAccordionIndices property.\n   * @param {number} index - Index of accordion to toggle\n   * @param {string} componentName - The state.desktop property with a activeAccordionIndices property\n   */\n  handleAccordionIndicesChange = (index, componentName) => {\n    // Make a copy of the desktop state object\n    const desktop = { ...this.state.desktop };\n\n    // Get the active indices for that component\n    const { activeAccordionIndices } = desktop[componentName];\n\n    // Get the position of the accordion index\n    const pos = activeAccordionIndices.indexOf(index);\n\n    // Position was found, remove the index for the user is closing the accordion\n    if (pos !== -1) {\n      activeAccordionIndices.splice(pos, 1);\n    }\n    // Position not found, add the index\n    else {\n      activeAccordionIndices.push(index);\n    }\n\n    // Update the state of the active indices for the given component\n    this.setState({ desktop });\n  };\n\n  componentDidMount() {\n    // Perform initial check for mobile device\n    this.updateMobileState();\n    window.addEventListener(\"resize\", this.updateMobileState);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateMobileState);\n  }\n\n  /**\n   * Creates the JSX for the desktop version of the viewport.\n   * @returns {JSX}\n   */\n  createDesktopViewport() {\n    return <Viewport callbacks={this.props.callbacks.viewport} />;\n  }\n\n  /**\n   * Creates the JSX for the desktop version of the brush.\n   * @returns {JSX}\n   */\n  createDesktopBrush = () => {\n    const { brushSettings } = this.state.desktop;\n\n    return (\n      <Segment.Group>\n        <Segment inverted>\n          <Header as=\"h4\" inverted>\n            <Icon name=\"paint brush\" />\n            <Header.Content>\n              Brush Settings\n              <Header.Subheader>Add, remove, or paint voxels</Header.Subheader>\n            </Header.Content>\n          </Header>\n\n          <Accordion inverted fluid exclusive={false}>\n            <Accordion.Title\n              active={brushSettings.activeAccordionIndices.includes(0)}\n              content=\"Brush Action\"\n              index={0}\n              onClick={(e, titleProps) => {\n                this.handleAccordionIndicesChange(\n                  titleProps.index,\n                  \"brushSettings\"\n                );\n              }}\n            />\n            <Accordion.Content\n              active={brushSettings.activeAccordionIndices.includes(0)}\n            >\n              <Menu inverted vertical fluid>\n                <Brush callbacks={this.props.callbacks.brush} />\n              </Menu>\n            </Accordion.Content>\n          </Accordion>\n        </Segment>\n      </Segment.Group>\n    );\n  };\n\n  /**\n   * Creates the JSX for the desktop version of the color palette.\n   * @returns {JSX}\n   */\n  createDesktopColorPalette = () => {\n    const { colorPalette } = this.state.desktop;\n\n    return (\n      <Segment.Group>\n        <Segment inverted>\n          <Header as=\"h4\" inverted>\n            <Icon name=\"tint\" />\n            <Header.Content>\n              Color Palette\n              <Header.Subheader>Select a color to paint with</Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Accordion inverted fluid exclusive={false}>\n            <Accordion.Title\n              active={colorPalette.activeAccordionIndices.includes(0)}\n              content=\"Color Selection\"\n              index={0}\n              onClick={(e, titleProps) => {\n                this.handleAccordionIndicesChange(\n                  titleProps.index,\n                  \"colorPalette\"\n                );\n              }}\n            />\n            <Accordion.Content\n              active={colorPalette.activeAccordionIndices.includes(0)}\n            >\n              <ColorPalette callbacks={this.props.callbacks.colorPalette} />\n            </Accordion.Content>\n          </Accordion>\n        </Segment>\n      </Segment.Group>\n    );\n  };\n\n  /**\n   * Create the desktop version of the UI.\n   * @returns {JSX}\n   */\n  createDesktopGUI() {\n    return (\n      <Grid padded style={{ height: \"100vh\" }}>\n        <Grid.Row style={{ paddingTop: \"0\", paddingBottom: \"0\" }}>\n          <Grid.Column>\n            <Menu inverted>\n              <File callbacks={this.props.callbacks.file} />\n              {/*<Edit />*/}\n              <Render callbacks={this.props.callbacks.render} />\n            </Menu>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row\n          style={{ height: \"90%\", paddingTop: \"0\", paddingBottom: \"0\" }}\n        >\n          <Grid.Column\n            width={3}\n            style={{\n              height: \"100%\",\n              overflowY: \"auto\",\n            }}\n          >\n            {this.createDesktopBrush()}\n            {this.createDesktopColorPalette()}\n          </Grid.Column>\n\n          <Grid.Column width={13} style={{ height: \"100%\" }}>\n            {this.createDesktopViewport()}\n          </Grid.Column>\n\n          {/* Right Panel. Empty for now.*/}\n          {/* <Grid.Column width={2} style={{ height: \"100%\" }}></Grid.Column> */}\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  /**\n   * Creates JSX for modals on mobile devices.\n   * @TODO Only works for the color palette. Make it more general!\n   * @returns {JSX}\n   */\n  createMobileModal() {\n    return (\n      <Modal\n        open={this.state.mobile.isColorModalOpen}\n        onClose={() =>\n          this.setState({\n            mobile: { isColorModalOpen: false },\n          })\n        }\n        onOpen={() =>\n          this.setState({\n            mobile: { isColorModalOpen: true },\n          })\n        }\n      >\n        <Modal.Header>Color Palette</Modal.Header>\n        <Modal.Content scrolling>\n          <Modal.Description>\n            <ColorPalette callbacks={this.props.callbacks.colorPalette} />\n          </Modal.Description>\n        </Modal.Content>\n\n        <Modal.Actions>\n          <Button\n            onClick={() =>\n              this.setState({\n                mobile: { isColorModalOpen: false },\n              })\n            }\n            primary\n          >\n            Close\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  /**\n   * Create the mobile version of the UI.\n   * @returns {JSX}\n   */\n  createMobileGUI() {\n    return (\n      <div style={{ height: window.innerHeight }}>\n        <Menu fixed=\"top\" inverted>\n          <File callbacks={this.props.callbacks.file} />\n          {/*<Edit />*/}\n          <Render callbacks={this.props.callbacks.render} />\n        </Menu>\n\n        <Viewport callbacks={this.props.callbacks.viewport} />\n\n        {this.createMobileModal()}\n\n        <Menu fixed=\"bottom\" inverted style={{ overflowX: \"auto\" }}>\n          <Brush callbacks={this.props.callbacks.brush} />\n\n          <Menu.Item\n            as=\"a\"\n            onClick={() =>\n              this.setState({ mobile: { isColorModalOpen: true } })\n            }\n          >\n            Color Palette\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    return this.state.isMobile\n      ? this.createMobileGUI()\n      : this.createDesktopGUI();\n  }\n}\n\nexport default GUIController;\n","import * as THREE from \"three\";\n\n/**\n * Manages voxel data.\n * At the top level, a single VoxelWorld consists of cells. Each cell is a 'chunk' of the world\n * that consists of voxels (i.e. cubes). In order to optimize render times, we merge the geometry\n * of all the voxels within a single cell and make a single render call (as opposed to rendering\n * each individual voxel). In addition, a single cell is essentially a 3D grid that voxels are\n * placed in. Each cell has a length, width, and height dictated by the cellSize variable. This could\n * be set to anything but is perhaps best capped at 128 or 256 (256^3 is 16,777,216 voxels!).\n *\n * @property {number} cellSize      - The length, width, and height of a single cell (or chunk) within the world\n * @property {number} cellSliceSize - The area of a single slice of each cell (cellSize^2)\n * @property {Object} cell          - Object consisting of an array for each cell\n */\nclass VoxelWorld {\n  /**\n   * Creates a VoxelWorld object with the given options\n   * @param {Object} options - Options to spawn the world with\n   * @param {number} options.cellSize - The length, width, and height of each cell\n   * @param {number} options.tileSize - The size of each tile from a texture atlas\n   * @param {number} options.tileTextureWidth - The width of the texture atlas\n   * @param {number} options.tileTextureHeight - The height of the texture atlas\n   * @param {*} options.material - The material that the VoxelWorld should use for its meshes\n   * @param {ColorPalette} options.colorPalette- The current color palette that the world is using\n   */\n  constructor(options) {\n    this.cellSize = options.cellSize;\n    this.tileSize = options.tileSize;\n    this.tileTextureWidth = options.tileTextureWidth;\n    this.tileTextureHeight = options.tileTextureHeight;\n    this.material = options.material;\n    this.colorPalette = options.colorPalette;\n    this.cellSliceSize = this.cellSize * this.cellSize;\n    this.cells = options.cells;\n\n    // Used in the updateCellGeometry() function\n    // Tracks the meshes for each cell\n    this.cellIdToMesh = {};\n\n    // Used in updateVoxelGeometry() function\n    this.neighborOffsets = [\n      [0, 0, 0], // self\n      [-1, 0, 0], // left\n      [1, 0, 0], // right\n      [0, -1, 0], // down\n      [0, 1, 0], // up\n      [0, 0, -1], // back\n      [0, 0, 1], // front\n    ];\n  }\n\n  /**\n   * Returns the offset, or index, to the voxel within the cell array\n   * at the given x, y, and z coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {number} Index to the voxel within the cell array\n   */\n  computeVoxelOffset(x, y, z) {\n    const { cellSize, cellSliceSize } = this;\n\n    // Note, the \"| 0\" actually TRUNCATES the value! Not quite the same as flooring\n    // https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\n    // Also, euclideanModulo(n, m) is the equivalent of (( n % m ) + m ) % m\n    const voxelX = THREE.MathUtils.euclideanModulo(x, cellSize) | 0;\n    const voxelY = THREE.MathUtils.euclideanModulo(y, cellSize) | 0;\n    const voxelZ = THREE.MathUtils.euclideanModulo(z, cellSize) | 0;\n\n    // Return index voxel is located at\n    return voxelY * cellSliceSize + voxelZ * cellSize + voxelX;\n  }\n\n  /**\n   * Computes the id of the cell stored as a key in this.cells based\n   * on the given x, y, and z coordinates of a voxel.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {string} The id of the cell in the form of \"(x,y,z)\"\n   */\n  computeCellId(x, y, z) {\n    const { cellSize } = this;\n    const cellX = Math.floor(x / cellSize);\n    const cellY = Math.floor(y / cellSize);\n    const cellZ = Math.floor(z / cellSize);\n    return `${cellX},${cellY},${cellZ}`;\n  }\n\n  /**\n   * Adds a new cell for a voxel at the given x, y, and z coordinates if a\n   * cell doesn't already exist to accomodate it.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {Uint8Array} Array of voxels for the cell\n   */\n  addCellForVoxel(x, y, z) {\n    // Get the id of the cell corresponding to the x, y, and z coordinate\n    const cellId = this.computeCellId(x, y, z);\n\n    // Get the array of voxels associated with the cellId\n    let cell = this.cells[cellId];\n\n    // If cell doesn't exist, add it\n    if (!cell) {\n      const { cellSize } = this;\n      cell = new Uint8Array(cellSize * cellSize * cellSize);\n      this.cells[cellId] = cell;\n    }\n\n    // Return the cell\n    return cell;\n  }\n\n  /**\n   * Finds the corresponding voxel array for the cell for the given voxel coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {Uint8Array} Array of voxels.\n   */\n  getCellForVoxel(x, y, z) {\n    return this.cells[this.computeCellId(x, y, z)];\n  }\n\n  /**\n   * Sets voxel at given coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @param {number} v - The type of voxel to add\n   * @param {boolean} addCell - If true, a new cell will be created to accomodate the voxel if needed\n   */\n  setVoxel(x, y, z, v, addCell = true) {\n    // Get the array of voxels corresponding to the x, y, and z coordinates\n    let cell = this.getCellForVoxel(x, y, z);\n\n    // No cell was found\n    if (!cell) {\n      // If addCell is false, return\n      if (!addCell) {\n        return;\n      }\n      // Otherwise, create a new cell for the voxel\n      cell = this.addCellForVoxel(x, y, z);\n    }\n\n    // Find the index to add the new voxel within the found cell\n    const voxelOffset = this.computeVoxelOffset(x, y, z);\n\n    // Set the new voxel\n    cell[voxelOffset] = v;\n  }\n\n  /**\n   * Gets the corresponding voxel at the given coordinates.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @returns {number} Number representing the type of voxel\n   */\n  getVoxel(x, y, z) {\n    // Find the cell that has the voxel at the given coordinates\n    const cell = this.getCellForVoxel(x, y, z);\n\n    // No such cell exists! Default by returning 0\n    if (!cell) {\n      return 0;\n    }\n\n    // Find the index of the voxel within the cell\n    const voxelOffset = this.computeVoxelOffset(x, y, z);\n\n    // Return the voxel that was found\n    return cell[voxelOffset];\n  }\n\n  /**\n   * Generates geometry data for a cell at the given coordinate. Similar to voxels, each cell\n   * is a part of a 3D grid as well.\n   * @example\n   * generateGeometryDataForCell(0, 0, 0);  // Cell created at (0, 0, 0) coordinate\n   * generateGeometryDataForCell(0, 1, 0);  // Cell created above the last one at (0, 1, 0)\n   *\n   * @param {number} cellX\n   * @param {number} cellY\n   * @param {number} cellZ\n   */\n  generateGeometryDataForCell(cellX, cellY, cellZ) {\n    const { cellSize, tileSize, tileTextureWidth, tileTextureHeight } = this;\n\n    // Used for generating the geometry of the final mesh formed by the voxels\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    const colors = [];\n\n    // Calculate origin point of the cell i.e. (0, 0, 0)\n    const startX = cellX * cellSize;\n    const startY = cellY * cellSize;\n    const startZ = cellZ * cellSize;\n\n    // Iterate over y coords\n    for (let y = 0; y < cellSize; ++y) {\n      const voxelY = startY + y;\n      // Iterate over z coords\n      for (let z = 0; z < cellSize; ++z) {\n        const voxelZ = startZ + z;\n        // Iterate over x coords\n        for (let x = 0; x < cellSize; ++x) {\n          const voxelX = startX + x;\n\n          // Get voxel at current x, y, and z coords\n          const voxel = this.getVoxel(voxelX, voxelY, voxelZ);\n\n          // Check if voxel exists (by default, a voxel 0 is empty)\n          if (voxel) {\n            // voxel 0 is sky so for UVs we start at 0\n            const uvVoxel = voxel - 1;\n\n            // There is a voxel here but do we need faces for it?\n            for (const { dir, corners, uvRow } of VoxelWorld.faces) {\n              // The neighboring voxel to the face of our voxel\n              const neighbor = this.getVoxel(\n                voxelX + dir[0],\n                voxelY + dir[1],\n                voxelZ + dir[2]\n              );\n\n              // neighbor voxel is empty (0) in this direction so we need a face\n              if (!neighbor) {\n                // Used to define the indices\n                const ndx = positions.length / 3;\n\n                // Add vertices for the face of the voxel and normals too\n                for (const { pos, uv } of corners) {\n                  positions.push(pos[0] + x, pos[1] + y, pos[2] + z);\n                  normals.push(...dir);\n\n                  // TODO: uv's no longer being used. Might be added in the future though\n                  // Calculates where to grab texture from the texture atlas\n                  // uvVoxel corresponds to the column and uvRow the row to get the texture\n                  uvs.push(\n                    ((uvVoxel + uv[0]) * tileSize) / tileTextureWidth,\n                    1 - ((uvRow + 1 - uv[1]) * tileSize) / tileTextureHeight\n                  );\n\n                  // Add color. Subtract 1 for empty voxels do not correspond with palette array\n                  const color = this.colorPalette.getColorAtIndex(voxel - 1);\n                  colors.push(color.r, color.g, color.b);\n                }\n\n                // Add indices used to draw the face\n                indices.push(ndx, ndx + 1, ndx + 2, ndx + 2, ndx + 1, ndx + 3);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Return object consisting of geometry data for the voxel model\n    return {\n      positions,\n      normals,\n      uvs,\n      indices,\n      colors,\n    };\n  }\n\n  /**\n   * Algorithm for raycasting specialized for use with voxels. Used to check if the\n   * user clicked a voxel in the scene and returns information related to it such as\n   * the coordinates of the successful hit.\n   * The code itself is based upon this paper: http://www.cse.chalmers.se/edu/year/2010/course/TDA361/grid.pdf\n   * @param {*} start\n   * @param {*} end\n   * @returns {Object} HitResults or null if nothing was hit\n   * @returns {Array.<number>} HitResults.position Coordinates of the hit\n   * @returns {Array.<number} HitResults.normal Normal of the hit\n   * @returns {number} HitResults.voxel The type of voxel hit\n   */\n  intersectRay(start, end) {\n    // Get the direction that ray is cast\n    let dx = end.x - start.x;\n    let dy = end.y - start.y;\n    let dz = end.z - start.z;\n\n    // Find the magnitude of the above direction\n    const lenSq = dx * dx + dy * dy + dz * dz;\n    const len = Math.sqrt(lenSq);\n\n    // Change to unit vector so we only have the direction of the ray cast\n    dx /= len;\n    dy /= len;\n    dz /= len;\n\n    // t is a scalar that we use to 'stretch' the ray into the scene to test for intersections\n    let t = 0.0;\n    let ix = Math.floor(start.x);\n    let iy = Math.floor(start.y);\n    let iz = Math.floor(start.z);\n\n    // Dictates how we 'step' from voxel to voxel\n    const stepX = dx > 0 ? 1 : -1;\n    const stepY = dy > 0 ? 1 : -1;\n    const stepZ = dz > 0 ? 1 : -1;\n\n    // The amount of change required to advance one whole voxel\n    const txDelta = Math.abs(1 / dx);\n    const tyDelta = Math.abs(1 / dy);\n    const tzDelta = Math.abs(1 / dz);\n\n    const xDist = stepX > 0 ? ix + 1 - start.x : start.x - ix;\n    const yDist = stepY > 0 ? iy + 1 - start.y : start.y - iy;\n    const zDist = stepZ > 0 ? iz + 1 - start.z : start.z - iz;\n\n    // location of nearest voxel boundary, in units of t\n    let txMax = txDelta < Infinity ? txDelta * xDist : Infinity;\n    let tyMax = tyDelta < Infinity ? tyDelta * yDist : Infinity;\n    let tzMax = tzDelta < Infinity ? tzDelta * zDist : Infinity;\n\n    // Represents the direction we last stepped in. Either x, y, or z\n    let steppedIndex = -1;\n\n    // main loop along raycast vector\n    while (t <= len) {\n      // Get the voxel at the ix, iy, and iz coordinate\n      const voxel = this.getVoxel(ix, iy, iz);\n\n      // Found a non-empty voxel! Return hit information\n      if (voxel) {\n        return {\n          position: [start.x + t * dx, start.y + t * dy, start.z + t * dz],\n          normal: [\n            steppedIndex === 0 ? -stepX : 0,\n            steppedIndex === 1 ? -stepY : 0,\n            steppedIndex === 2 ? -stepZ : 0,\n          ],\n          voxel,\n        };\n      }\n\n      // advance t to next nearest voxel boundary\n      // This is the core if-statement from the research paper\n      if (txMax < tyMax) {\n        if (txMax < tzMax) {\n          ix += stepX;\n          t = txMax;\n          txMax += txDelta;\n          steppedIndex = 0;\n        } else {\n          iz += stepZ;\n          t = tzMax;\n          tzMax += tzDelta;\n          steppedIndex = 2;\n        }\n      } else {\n        if (tyMax < tzMax) {\n          iy += stepY;\n          t = tyMax;\n          tyMax += tyDelta;\n          steppedIndex = 1;\n        } else {\n          iz += stepZ;\n          t = tzMax;\n          tzMax += tzDelta;\n          steppedIndex = 2;\n        }\n      }\n    }\n\n    // Nothing was found, return null\n    return null;\n  }\n\n  /**\n   * Updates the voxel of a cell at the given x, y, and z coordinates. Also,\n   * updates any cells that the voxel is adjacent to.\n   * @param scene - The scene to add the final mesh to\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  updateVoxelGeometry(scene, x, y, z) {\n    const updatedCellIds = {};\n\n    // Check the cell and all surrounding cells when updating voxel geometry\n    for (const offset of this.neighborOffsets) {\n      // Get the coordinates of the current cell to update\n      const ox = x + offset[0];\n      const oy = y + offset[1];\n      const oz = z + offset[2];\n\n      // Get the id of the cell we wish to update\n      const cellId = this.computeCellId(ox, oy, oz);\n\n      // If cell yet not updated, update it!\n      if (!updatedCellIds[cellId]) {\n        updatedCellIds[cellId] = true;\n\n        // Update the cell's geometry\n        this.updateCellGeometry(scene, ox, oy, oz);\n      }\n    }\n  }\n\n  /**\n   * Updates the geometry of the cell with the given coordinates within\n   * the scene.\n   * @param scene - The scene to add the final mesh to\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  updateCellGeometry(scene, x, y, z) {\n    const { cellSize } = this;\n\n    // Find the cell corresponding to the voxel at the x, y, and z coordinates\n    const cellX = Math.floor(x / cellSize);\n    const cellY = Math.floor(y / cellSize);\n    const cellZ = Math.floor(z / cellSize);\n    const cellId = this.computeCellId(x, y, z);\n\n    // Get the mesh corresponding to the given cellId\n    let mesh = this.cellIdToMesh[cellId];\n    // Get the geometry of the mesh. If no mesh exists, create new geometry\n    const geometry = mesh ? mesh.geometry : new THREE.BufferGeometry();\n\n    // Retrieve data for making the geometry for a given cell\n    const {\n      positions,\n      normals,\n      //uvs,\n      indices,\n      colors,\n    } = this.generateGeometryDataForCell(cellX, cellY, cellZ);\n\n    // Set position (vertex) data of cell\n    const positionNumComponents = 3;\n    geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(\n        new Float32Array(positions),\n        positionNumComponents\n      )\n    );\n\n    // Set normal data for cell\n    const normalNumComponents = 3;\n    geometry.setAttribute(\n      \"normal\",\n      new THREE.BufferAttribute(new Float32Array(normals), normalNumComponents)\n    );\n\n    // TODO: Add back if supporting textures\n    // Set uv data for cell\n    /*\n    const uvNumComponents = 2;\n    geometry.setAttribute(\n      \"uv\",\n      new THREE.BufferAttribute(new Float32Array(uvs), uvNumComponents)\n    );\n    */\n\n    const rgbNumComponents = 3;\n    geometry.setAttribute(\n      \"color\",\n      new THREE.BufferAttribute(new Float32Array(colors), rgbNumComponents)\n    );\n\n    // Set index data for cell\n    geometry.setIndex(indices);\n\n    // Comput bounding sphere of the geometry\n    geometry.computeBoundingSphere();\n\n    // If the mesh has not yet been created, create it!\n    if (!mesh) {\n      mesh = new THREE.Mesh(geometry, this.material);\n      mesh.name = cellId;\n      this.cellIdToMesh[cellId] = mesh;\n      scene.add(mesh);\n      mesh.position.set(cellX * cellSize, cellY * cellSize, cellZ * cellSize);\n    }\n  }\n\n  /**\n   * Updates every single cell within the world. Useful for when loading in\n   * a brand new world.\n   * @param {*} scene\n   */\n  updateWorldGeometry(scene) {\n    // Get an array of every cell's key\n    const cellKeys = Object.keys(this.cells);\n\n    // Regex used to extract cell position\n    let regex = /^(-?\\d+),(-?\\d+),(-?\\d+)$/;\n\n    // Update every cell\n    cellKeys.forEach((cellKey) => {\n      // Extract the x, y, and z position of the cell\n      let match = cellKey.match(regex);\n      const x = parseInt(match[1], 10);\n      const y = parseInt(match[2], 10);\n      const z = parseInt(match[3], 10);\n\n      // Update that cell\n      this.updateCellGeometry(\n        scene,\n        x * this.cellSize,\n        y * this.cellSize,\n        z * this.cellSize\n      );\n    });\n  }\n}\n\n/**\n * Array of objects that represent each face of a single voxel.\n * uvRow is the row of the texture atlas to grab an image from\n * dir is the direction of the face\n * corners consist of vertices and uv coordinates for the texture\n */\nVoxelWorld.faces = [\n  {\n    // left\n    uvRow: 0,\n    dir: [-1, 0, 0],\n    corners: [\n      { pos: [0, 1, 0], uv: [0, 1] },\n      { pos: [0, 0, 0], uv: [0, 0] },\n      { pos: [0, 1, 1], uv: [1, 1] },\n      { pos: [0, 0, 1], uv: [1, 0] },\n    ],\n  },\n  {\n    // right\n    uvRow: 0,\n    dir: [1, 0, 0],\n    corners: [\n      { pos: [1, 1, 1], uv: [0, 1] },\n      { pos: [1, 0, 1], uv: [0, 0] },\n      { pos: [1, 1, 0], uv: [1, 1] },\n      { pos: [1, 0, 0], uv: [1, 0] },\n    ],\n  },\n  {\n    // bottom\n    uvRow: 1,\n    dir: [0, -1, 0],\n    corners: [\n      { pos: [1, 0, 1], uv: [1, 0] },\n      { pos: [0, 0, 1], uv: [0, 0] },\n      { pos: [1, 0, 0], uv: [1, 1] },\n      { pos: [0, 0, 0], uv: [0, 1] },\n    ],\n  },\n  {\n    // top\n    uvRow: 2,\n    dir: [0, 1, 0],\n    corners: [\n      { pos: [0, 1, 1], uv: [1, 1] },\n      { pos: [1, 1, 1], uv: [0, 1] },\n      { pos: [0, 1, 0], uv: [1, 0] },\n      { pos: [1, 1, 0], uv: [0, 0] },\n    ],\n  },\n  {\n    // back\n    uvRow: 0,\n    dir: [0, 0, -1],\n    corners: [\n      { pos: [1, 0, 0], uv: [0, 0] },\n      { pos: [0, 0, 0], uv: [1, 0] },\n      { pos: [1, 1, 0], uv: [0, 1] },\n      { pos: [0, 1, 0], uv: [1, 1] },\n    ],\n  },\n  {\n    // front\n    uvRow: 0,\n    dir: [0, 0, 1],\n    corners: [\n      { pos: [0, 0, 1], uv: [0, 0] },\n      { pos: [1, 0, 1], uv: [1, 0] },\n      { pos: [0, 1, 1], uv: [0, 1] },\n      { pos: [1, 1, 1], uv: [1, 1] },\n    ],\n  },\n];\n\nexport default VoxelWorld;\n","/**\n * Brush object used to determine how to paint voxels on the scene.\n */\nclass Brush {\n  constructor(brush = \"add\") {\n    this.setCurrentBrush(brush);\n  }\n\n  // Options for each brush\n  static brushOptions = {\n    add: \"add\",\n    remove: \"remove\",\n    paint: \"paint\",\n  };\n\n  /**\n   * Sets the current brush to one of the available brush options.\n   * @param {string} brushName\n   */\n  setCurrentBrush(brushName) {\n    // Get the brush to set\n    const brush = Brush.brushOptions[brushName];\n\n    // If that brush exists, set it as current\n    if (brush) {\n      this.currentBrush = brush;\n    }\n  }\n}\n\nexport default Brush;\n","/**\n * Internal representation of the ColorPalette React component.\n * Used to track each color of the voxels within the scene.\n *\n * @property {Array.<Color>} colors - Array containing all of the colors in the color palette\n * @property {number} selectedColor - The currently selected color from the colors array\n * @property {number} maxColors - The maximum number of colors that the colors array can hold\n */\nclass ColorPalette {\n  constructor(colors = null, selectedColor = 0) {\n    // Initialize the color array\n    // @TODO: This doesn't necessarily work for passed in colors! Rework it\n    this.colors = colors ? colors : [new Color(0.5176, 0.7843, 0.0902)];\n\n    // The currently selected color\n    this.selectedColor = selectedColor;\n\n    // The VoxelWorld can only hold up to 255 colors\n    this.maxColors = 128;\n  }\n\n  /**\n   * Creates a new color array from the new one.\n   * @param {Array} newColors\n   */\n  setNewColorsArray(newColors) {\n    this.colors = newColors.map(({ r, g, b }) => new Color(r, g, b));\n  }\n\n  /**\n   * Adds a new color to the end of the colors array. Red by default.\n   * @param {number} [r = 1]\n   * @param {number} [g = 0]\n   * @param {number} [b = 0]\n   */\n  addColor(r = 1, g = 0, b = 0) {\n    if (!this.isColorsFull()) {\n      this.colors.push(new Color(r, g, b));\n      this.selectedColor = this.colors.length - 1;\n    }\n  }\n\n  /**\n   * Checks if the colors array is full. True if it is. False otherwise.\n   * @returns {boolean}\n   */\n  isColorsFull() {\n    return this.colors.length >= this.maxColors;\n  }\n\n  /**\n   * Sets the color at the given index to the given r, g, b values.\n   * @param {number} index\n   * @param {number} r\n   * @param {number} g\n   * @param {number} b\n   */\n  setColorAtIndex(index, r, g, b) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return;\n\n    // Set the rgb values of the color\n    this.colors[index].r = r;\n    this.colors[index].g = g;\n    this.colors[index].b = b;\n  }\n\n  /**\n   * Returns the color at the given index.\n   * @param {number} index\n   * @returns {Color} The color at the index. Null if not found\n   */\n  getColorAtIndex(index) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return null;\n    return this.colors[index];\n  }\n\n  /**\n   * Returns the currently selected color.\n   * @returns {Color}\n   */\n  getSelectedColor() {\n    return this.colors[this.selectedColor];\n  }\n\n  /**\n   * Changes the currently selected color to another within the colors array.\n   * @param {number} index\n   */\n  setSelectedColor(index) {\n    // If index out of range, return\n    if (index < 0 || index >= this.colors.length) return null;\n    this.selectedColor = index;\n  }\n\n  /**\n   * Returns the index of the selected color.\n   * @returns {number}\n   */\n  getSelectedColorIndex() {\n    return this.selectedColor;\n  }\n\n  /**\n   * Returns the array of colors currently in the palette.\n   * @returns {Array.Color}\n   */\n  getColorsArray() {\n    return this.colors;\n  }\n}\n\n/**\n * Class that represents a single rgb color with each component being from\n * 0 to 1.\n */\nclass Color {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  /**\n   * Returns a 0-255 value representation of the color.\n   * @returns {Object}\n   */\n  getRGB255() {\n    return { r: this.r * 255, g: this.g * 255, b: this.b * 255 };\n  }\n}\n\nexport default ColorPalette;\n","// Import Three.js\nimport * as THREE from \"three\";\n\n// Import orbit controls\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\n// Import Exporters\nimport { OBJExporter } from \"three/examples/jsm/exporters/OBJExporter\";\nimport { PLYExporter } from \"three/examples/jsm/exporters/PLYExporter\";\nimport { ColladaExporter } from \"three/examples/jsm/exporters/ColladaExporter\";\nimport { STLExporter } from \"three/examples/jsm/exporters/STLExporter\";\n\n// Import modules\nimport VoxelWorld from \"./VoxelWorld\";\nimport Brush from \"./Brush\";\nimport ColorPalette from \"./ColorPalette\";\n\n// Import FileSaver\nimport FileSaver from \"file-saver\";\n\n// Import image assets\n//import textureAtlas from \"../images/flourish-cc-by-nc-sa.png\";\n\n/**\n * Helper function to return a random integer between the min and max value\n * in a range of [min, max).\n * TODO: This can be removed soon\n * @param {number} min\n * @param {number} max\n * @returns\n */\nfunction randInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/**\n * Has the cell at the given coordinates form a sine wave out of its voxels.\n * @param {VoxelWorld} world - The world to spawn the sine wave in\n * @param {number} cellX\n * @param {number} cellY\n * @param {number} cellZ\n * @param {number} cellSize - Dimensions of the cell\n * @param {number} [v=0] - The type of voxel to spawn. 0 for random\n */\n/*\nfunction createSineWave(world, cellX, cellY, cellZ, cellSize, v = 0) {\n  const startX = cellX * cellSize;\n  const startY = cellY * cellSize;\n  const startZ = cellZ * cellSize;\n\n  // Create a sine wave with our voxels\n  for (let y = 0; y < cellSize; ++y) {\n    for (let z = 0; z < cellSize; ++z) {\n      for (let x = 0; x < cellSize; ++x) {\n        // Calculate the maximum height at the x and z position for a voxel to be placed\n        const height =\n          (Math.sin((x / cellSize) * Math.PI * 2) +\n            Math.sin((z / cellSize) * Math.PI * 3)) *\n            (cellSize / 6) +\n          cellSize / 2;\n\n        // Set voxel if y is below the height\n        if (y < height) {\n          // Set voxel to random texture\n          world.setVoxel(\n            startX + x,\n            startY + y,\n            startZ + z,\n            v ? v : randInt(1, 17)\n          );\n        }\n      }\n    }\n  }\n}\n*/\n\n/**\n * Has the cell at the given coordinates form a flat ground out of its voxels.\n * @param {VoxelWorld} world - The world to spawn flat ground in\n * @param {number} cellX\n * @param {number} cellY\n * @param {number} cellZ\n * @param {number} cellSize - Dimensions of the cell\n * @param {number} [v=0] - The type of voxel to spawn. 0 for random\n */\nfunction createFlatGround(world, cellX, cellY, cellZ, cellSize, v = 0) {\n  const startX = cellX * cellSize;\n  const startY = cellY * cellSize;\n  const startZ = cellZ * cellSize;\n\n  // Create flat ground with our voxels\n  for (let z = 0; z < cellSize; ++z) {\n    for (let x = 0; x < cellSize; ++x) {\n      // Set voxel to random texture or v if given\n      world.setVoxel(startX + x, startY, startZ + z, v ? v : randInt(1, 17));\n    }\n  }\n}\n\n/**\n * TODO: Temporary function for creating the texture atlas. Will be removed\n * during the creation of the ColorPalette code.\n * @param {*} render\n * @return texture\n */\n/*\nfunction createTextureAtlas(render) {\n  // Load texture atlas\n  const loader = new THREE.TextureLoader();\n  const texture = loader.load(textureAtlas, render);\n  texture.magFilter = THREE.NearestFilter;\n  texture.minFilter = THREE.NearestFilter;\n  return texture;\n}\n*/\n\n/**\n * Class used to interface with the scene and handles the main render loop.\n */\nclass VoxelEditor {\n  constructor(options) {\n    this.canvas = options.canvas;\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true,\n    });\n\n    // Length, width, and height of each cell in the VoxelWorld\n    this.cellSize = 32;\n\n    // Initialize the camera\n    this.createCamera();\n\n    // Initialize orbit controls\n    this.createOrbitControls();\n\n    // Create the scene\n    this.scene = new THREE.Scene();\n\n    // Setting background color to the same one Blender uses\n    this.scene.background = new THREE.Color(\"#3C3C3C\");\n\n    // Add two directional lights to the scene\n    this.addLight(-1, 2, 4);\n    this.addLight(1, -1, -2);\n\n    // TODO: Remove these variables soon. Not needed for ColorPalette\n    const tileSize = 16;\n    const tileTextureWidth = 256;\n    const tileTextureHeight = 64;\n    //const texture = createTextureAtlas(this.render);\n\n    // Create material for the voxel model\n    const material = new THREE.MeshLambertMaterial({\n      // TODO: add texture back if using textures\n      //map: texture,\n      side: THREE.DoubleSide,\n      alphaTest: 0.1,\n      transparent: true,\n      vertexColors: true,\n    });\n\n    // Load from previous world or set defaults\n    const { world } = options;\n    const colorPalette = world ? world.colorPalette : new ColorPalette();\n    const cells = world ? world.cells : {};\n\n    // Create a new VoxelWorld that will manage our voxels\n    this.world = new VoxelWorld({\n      cellSize: this.cellSize,\n      tileSize,\n      tileTextureWidth,\n      tileTextureHeight,\n      material,\n      colorPalette,\n      cells,\n    });\n\n    // If there is no pre-existing world, create flat ground by default\n    if (!world) {\n      // Create a floor to the world\n      createFlatGround(this.world, 0, 0, 0, this.cellSize, 1); // Center\n    }\n\n    // Update geometry of the entire world\n    this.world.updateWorldGeometry(this.scene);\n\n    // Used with requestRenderIfNotRequested() function\n    this.renderRequested = false;\n\n    // Mouse object representing the position of mouse clicks.\n    this.mouse = {\n      x: 0,\n      y: 0,\n      moveX: 0,\n      moveY: 0,\n    };\n\n    // Listen for mouse clicks\n    this.canvas.addEventListener(\n      \"pointerdown\",\n      (event) => {\n        event.preventDefault();\n        // Record where we first clicked\n        this.recordStartPosition(event);\n\n        // Record mouse movement\n        window.addEventListener(\"pointermove\", this.recordMovement);\n\n        // Add voxel upon releasing mouse click if movement is small. Other,\n        // user is orbiting the camera\n        window.addEventListener(\"pointerup\", this.placeVoxelIfNoMovement);\n      },\n      { passive: false }\n    );\n\n    // Listen for touch events\n    this.canvas.addEventListener(\n      \"touchstart\",\n      (event) => {\n        // prevent scrolling\n        event.preventDefault();\n      },\n      { passive: false }\n    );\n\n    // Listen for camera orbit events\n    this.controls.addEventListener(\"change\", this.requestRenderIfNotRequested);\n\n    // Listen for window resizing events\n    window.addEventListener(\"resize\", this.requestRenderIfNotRequested);\n\n    // Create new brush\n    this.brush = new Brush();\n\n    // Start render loop\n    this.render();\n  }\n\n  /**\n   * Helper function used to create the camera and set it to a default position.\n   * @param {number} [fov=75] - field of view\n   * @param {number} [aspect=2] - Aspect. Canvas default is 2\n   * @param {number} [near=0.1]\n   * @param {number} [far=1000]\n   */\n  createCamera(fov = 75, aspect = 2, near = 0.1, far = 1000) {\n    // Create a new perspective camera\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n    // TODO: This is an arbitrary starting position. Consider an alternative\n    this.camera.position.set(\n      -this.cellSize * 0.2,\n      this.cellSize * 0.3,\n      -this.cellSize * 0.2\n    );\n  }\n\n  /**\n   * Helper function to create the orbit controls.\n   */\n  createOrbitControls() {\n    // Create the orbit controls\n    this.controls = new OrbitControls(this.camera, this.canvas);\n\n    // Orbit controls starts by targeting center of scene\n    this.controls.target.set(this.cellSize / 2, 0, this.cellSize / 2);\n\n    // Controls must be updated before they can be used\n    this.controls.update();\n  }\n\n  /**\n   * Adds a directional light to the scene at the given x, y, and z position.\n   * Remember, the default position of the directional light's target is (0, 0, 0).\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  addLight(x, y, z) {\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(x, y, z);\n    this.scene.add(light);\n  }\n\n  /**\n   * Checks if the renderer needs to resize to account for changes in screen\n   * width or height.\n   * @param {WebGLRenderer} renderer\n   * @returns {boolean} True if the renderer resized. False otherwise.\n   */\n  resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    const needResize = canvas.width !== width || canvas.height !== height;\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n    return needResize;\n  }\n\n  /**\n   * Main render loop.\n   */\n  render = () => {\n    this.renderRequested = undefined;\n\n    if (this.resizeRendererToDisplaySize(this.renderer)) {\n      this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n      this.camera.updateProjectionMatrix();\n    }\n\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Used to make a render update request only if one hasn't been made already.\n   */\n  requestRenderIfNotRequested = () => {\n    if (!this.renderRequested) {\n      this.renderRequested = true;\n      requestAnimationFrame(this.render);\n    }\n  };\n\n  /**\n   * Finds the x and y coordinate of a mouse click relative to the canvas.\n   * @param {Event} event\n   * @returns {Object} Object with x and y coordinates of click relative to canvas\n   */\n  getCanvasRelativePosition(event) {\n    const { canvas } = this;\n    const rect = canvas.getBoundingClientRect();\n\n    // Calculate the x and y of click relative to the canvas\n    return {\n      x: ((event.clientX - rect.left) * canvas.width) / rect.width,\n      y: ((event.clientY - rect.top) * canvas.height) / rect.height,\n    };\n  }\n\n  /**\n   * Handler for adding, removing, or painting a voxel based on the given brush\n   * and where the user clicked.\n   * @param {Event} event\n   */\n  placeVoxel(event) {\n    // Find position of mouse click relative to canvas\n    const pos = this.getCanvasRelativePosition(event);\n    const x = (pos.x / this.canvas.width) * 2 - 1;\n    const y = (pos.y / this.canvas.height) * -2 + 1; // note we flip Y\n\n    // Get the starting and ending vectors for our raycast\n    const start = new THREE.Vector3();\n    const end = new THREE.Vector3();\n    start.setFromMatrixPosition(this.camera.matrixWorld);\n    end.set(x, y, 1).unproject(this.camera);\n\n    // Cast a ray into the scene\n    const intersection = this.world.intersectRay(start, end);\n\n    // If raycast was successful, place a voxel with the information returned\n    if (intersection) {\n      // Set voxelId depending on brush option. 0 removes voxels\n      const voxelId =\n        this.brush.currentBrush === Brush.brushOptions.remove\n          ? 0\n          : this.world.colorPalette.getSelectedColorIndex() + 1;\n\n      // the intersection point is on the face. That means\n      // the math imprecision could put us on either side of the face.\n      // so go half a normal into the voxel if removing/painting\n      // or half a normal out if adding\n      const pos = intersection.position.map((v, ndx) => {\n        return (\n          v +\n          intersection.normal[ndx] *\n            (this.brush.currentBrush === Brush.brushOptions.add ? 0.5 : -0.5)\n        );\n      });\n\n      // Set voxel at the pos position with new voxelID\n      this.world.setVoxel(...pos, voxelId);\n\n      // Update the cell associated with the position of the new voxel\n      this.world.updateVoxelGeometry(this.scene, ...pos);\n\n      // Update render frame\n      this.requestRenderIfNotRequested();\n    }\n  }\n\n  /**\n   * Reset mouse movement and begin recording.\n   * @param {Event} event\n   */\n  recordStartPosition = (event) => {\n    const { mouse } = this;\n    mouse.x = event.clientX;\n    mouse.y = event.clientY;\n    mouse.moveX = 0;\n    mouse.moveY = 0;\n  };\n\n  /**\n   * Callback function used to record how far the mouse has moved since started recording.\n   * @param {Event} event\n   */\n  recordMovement = (event) => {\n    const { mouse } = this;\n    mouse.moveX += Math.abs(mouse.x - event.clientX);\n    mouse.moveY += Math.abs(mouse.y - event.clientY);\n  };\n\n  /**\n   * Callback function used to check if the user meant to set a voxel instead\n   * of orbiting the camera.\n   * @param {Event} event\n   */\n  placeVoxelIfNoMovement = (event) => {\n    const { mouse } = this;\n    // Mouse hardly moved, user likely intended to place a voxel\n    if (mouse.moveX < 5 && mouse.moveY < 5) {\n      // TODO: Remove global variable currentBrush\n      this.placeVoxel(event);\n    }\n\n    // Stop recording movement and checks to place voxel\n    window.removeEventListener(\"pointermove\", this.recordMovement);\n    window.removeEventListener(\"pointerup\", this.placeVoxelIfNoMovement);\n  };\n\n  /**\n   * Called whenever a new color is selected.\n   * @param {number} index - Index of the changed color\n   * @param {r} r - Red color from 0-1\n   * @param {g} g - Green color from 0-1\n   * @param {b} b - Blue color from 0-1\n   */\n  onSelectedColorChange = (index, r, g, b) => {\n    // Update the color\n    this.world.colorPalette.setColorAtIndex(index, r, g, b);\n\n    // Updated the world with new color\n    this.world.updateWorldGeometry(this.scene);\n\n    // Update render frame\n    this.requestRenderIfNotRequested();\n  };\n\n  /**\n   * Updates which voxel the user is placing/painting now from the palette.\n   * @param {number} index\n   */\n  onNewSelectedColor = (index) => {\n    // Update the currently selected color for adding/painting\n    this.world.colorPalette.setSelectedColor(index);\n  };\n\n  /**\n   * Gets project data from the currently open project.\n   * @returns {Object} JavaScript object representing the relevant data from the\n   * currently open project/scene.\n   */\n  onGetProjectData = () => {\n    const projectObj = {\n      voxelWorld: {\n        cellSize: this.world.cellSize,\n        cells: this.world.cells,\n      },\n      colorPalette: {\n        colors: this.world.colorPalette.getColorsArray(),\n        selectedColor: this.world.colorPalette.getSelectedColorIndex(),\n      },\n    };\n\n    return projectObj;\n  };\n\n  /**\n   * Loads a project from the given data.\n   * @param {Object} projectData\n   */\n  onLoadProjectData = (projectData) => {\n    const { voxelWorld, colorPalette } = projectData;\n\n    // Load data for the color palette\n    this.world.colorPalette.setNewColorsArray(colorPalette.colors);\n    this.world.colorPalette.setSelectedColor(colorPalette.selectedColor);\n\n    // Load data for the VoxelWorld\n    this.world.cells = voxelWorld.cells;\n    this.world.cellSize = voxelWorld.cellSize;\n\n    // Update world geometry and rerender\n    this.world.updateWorldGeometry(this.scene);\n    this.requestRenderIfNotRequested();\n  };\n\n  /**\n   * Exports the current frame of the canvas to an image file.\n   * @param {string} imageName\n   */\n  onExportImage = (imageName) => {\n    // Render must first be invoked to get current frame\n    this.render();\n\n    // Save the current frame as an image\n    this.canvas.toBlob((blob) => {\n      FileSaver.saveAs(blob, imageName + \".png\");\n    }, \"image/png\");\n  };\n\n  /**\n   * Exports the voxel model to an Obj file.\n   * @param {string} name - What the exported file should be called\n   * @param {string} type - The type of file to export\n   */\n  onExportObj = (name, type) => {\n    // Create an exporter that matches the given type\n    let exporter, blobType;\n    switch (type) {\n      case \"obj\":\n        exporter = new OBJExporter();\n        blobType = \"model/obj\";\n        break;\n\n      case \"ply\":\n        exporter = new PLYExporter();\n        // ply doesn't appear to have an official internet media type\n        blobType = \"text/plain\";\n        break;\n\n      case \"stl\":\n        exporter = new STLExporter();\n        blobType = \"model/stl\";\n        break;\n\n      case \"dae\":\n        exporter = new ColladaExporter();\n        blobType = \"model/vnd.collada+xml\";\n        break;\n\n      default:\n        exporter = null;\n        break;\n    }\n\n    // If type is invalid, return\n    if (!exporter) return;\n\n    // Parse the scene for object data\n    const result = exporter.parse(this.scene);\n\n    // Create a blob to download with object data\n    const blob = new Blob([result], {\n      type: blobType,\n    });\n\n    // Save object file to user's device\n    FileSaver.saveAs(blob, name + \".\" + type);\n  };\n}\n\nexport default VoxelEditor;\n","import React from \"react\";\nimport GUIController from \"./GUIController\";\nimport VoxelEditor from \"../modules/VoxelsEditor\";\n\n/**\n * The main driving component for the application. Sets up the rest of\n * the user interface and directly communicates with the Voxel.js module.\n * @extends React.Component\n */\nclass VoxelManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // The VoxelEditor itself that handles the 3D scene\n    this.voxelEditor = null;\n\n    // Create object with callbacks for each component\n    this.callbacks = this.getCallbacksObject();\n  }\n\n  /**\n   * Takes the given canvas Ref and renders the voxel world.\n   * @param {Ref} canvasRef\n   */\n  createVoxelWorld = (canvasRef) => {\n    if (!canvasRef) return;\n\n    if (!this.voxelEditor) {\n      this.voxelEditor = new VoxelEditor({ canvas: canvasRef.current });\n    } else {\n      const world = this.voxelEditor.world;\n      this.voxelEditor = new VoxelEditor({ canvas: canvasRef.current, world });\n    }\n  };\n\n  /**\n   * Changes the brush currently being used.\n   * @param {string} brushName - name of the brush to set\n   */\n  setCurrentBrush = (brushName) => {\n    if (this.voxelEditor) {\n      this.voxelEditor.brush.setCurrentBrush(brushName);\n    }\n  };\n\n  /**\n   * Returns color palette data from the VoxelWorld.\n   * @returns {Array.Color}\n   */\n  onGetColorData = () => {\n    // Return empty array if voxelEditor not ready\n    if (!this.voxelEditor) {\n      return {\n        colors: [],\n        selectedColorIndex: 0,\n        currentColor: { r: 127.5, g: 127.5, b: 127.5 }, // default to a grey color\n        isColorsFull: true,\n      };\n    }\n\n    const { colorPalette } = this.voxelEditor.world;\n    const { r, g, b } = colorPalette.getSelectedColor().getRGB255();\n    return {\n      colors: colorPalette.getColorsArray(),\n      selectedColorIndex: colorPalette.getSelectedColorIndex(),\n      currentColor: { r, g, b },\n      isColorsFull: colorPalette.isColorsFull(),\n    };\n  };\n\n  /**\n   * Called whenever a new color is selected.\n   * @param {number} index - Index of the changed color\n   * @param {Object} color\n   */\n  onSelectedColorChange = (index, color) => {\n    if (this.voxelEditor) {\n      const { r, g, b } = color;\n\n      // Adjust the color to be on a 0-1 range\n      this.voxelEditor.onSelectedColorChange(index, r / 255, g / 255, b / 255);\n    }\n  };\n\n  /**\n   * Tells the VoxelEditor what color of voxel the user is placing/painting now.\n   * @param {number} index\n   */\n  onNewSelectedColor = (index) => {\n    if (this.voxelEditor) {\n      this.voxelEditor.onNewSelectedColor(index);\n    }\n  };\n\n  /**\n   * Tell the VoxelEditor that the user added a new color to their color palette\n   */\n  onAddColor = () => {\n    if (!this.voxelEditor) return;\n\n    // Add a new color to the color palette\n    this.voxelEditor.world.colorPalette.addColor();\n  };\n\n  /**\n   * Gets project data from the currently open project.\n   * @returns {Object} JavaScript object representing the relevant data from the\n   * currently open project/scene.\n   */\n  onGetProjectData = () => {\n    // If voxelEditor isn't ready, return an empty object\n    if (!this.voxelEditor) return {};\n\n    // Return object representing the currently open project\n    return this.voxelEditor.onGetProjectData();\n  };\n\n  /**\n   * Handler used to load a new scene from the given project data.\n   * @param {Object} projectData\n   */\n  onLoadProjectData = (projectData) => {\n    // If voxelEditor isn't ready, do nothing\n    if (!this.voxelEditor) return;\n\n    // Load the project\n    this.voxelEditor.onLoadProjectData(projectData);\n\n    // @TODO: Generally, you should never invoke this method.\n    // Since loading a project leads to a substantial change in the application's\n    // internal state, I am making an exception.\n    this.forceUpdate();\n  };\n\n  /**\n   * Handler used to export the current frame from the canvas as an image.\n   * @param {string} imageName - What to name the exported image\n   * @returns {Canvas} The canvas to take a screenshot from\n   */\n  onExportImage = (imageName) => {\n    if (!this.voxelEditor) return null;\n\n    this.voxelEditor.onExportImage(imageName);\n  };\n\n  /**\n   * Exports the voxel model to an Obj file.\n   * @param {string} name - What the exported file should be called\n   * @param {string} type - The type of file to export\n   */\n  onExportObj = (name, type) => {\n    if (!this.voxelEditor) return;\n\n    this.voxelEditor.onExportObj(name, type);\n  };\n\n  /**\n   * Returns callbacks organized by the component that they are meant for.\n   * @returns {Object}\n   */\n  getCallbacksObject = () => {\n    return {\n      brush: {\n        onBrushChange: this.setCurrentBrush,\n      },\n      colorPalette: {\n        onGetColorData: this.onGetColorData,\n        onSelectedColorChange: this.onSelectedColorChange,\n        onNewSelectedColor: this.onNewSelectedColor,\n        onAddColor: this.onAddColor,\n      },\n      viewport: {\n        onCanvasCreation: this.createVoxelWorld,\n      },\n      file: {\n        onGetProjectData: this.onGetProjectData,\n        onLoadProjectData: this.onLoadProjectData,\n        onExportObj: this.onExportObj,\n      },\n      render: {\n        onExportImage: this.onExportImage,\n      },\n    };\n  };\n\n  render() {\n    return <GUIController callbacks={this.callbacks} />;\n  }\n}\n\nexport default VoxelManager;\n","import \"./App.css\";\nimport VoxelManager from \"./VoxelManager\";\n\nconst App = () => {\n  return <VoxelManager />;\n};\n\nexport default App;\n","import \"semantic-ui-css/semantic.min.css\";\nimport \"./ColorVariables.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}